{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to sfapi_client","text":"<p>sfapi_client is a Python 3 client for NERSC's Superfacility API.</p> <p>Install sfapi_client using pip:</p> <pre><code>$ pip install sfapi_client\n</code></pre> <p>Let's get started by checking the status of perlmutter:</p> <pre><code>&gt;&gt;&gt; from sfapi_client import Client\n&gt;&gt;&gt; from sfapi_client.compute import Machine\n&gt;&gt;&gt; with Client() as client:\n...     status = client.compute(Machine.perlmutter)\n...\n&gt;&gt;&gt; status\nCompute(name='perlmutter', full_name='Perlmutter', description='System Degraded', system_type='compute', notes=['2023-04-26 18:16 -- 2023-04-28 09:30 PDT, System Degraded, Rolling reboots are complete, a final reboot is scheduled for 0930 PDT'], status=&lt;StatusValue.degraded: 'degraded'&gt;, updated_at=datetime.datetime(2023, 4, 26, 18, 16, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), client=&lt;sfapi_client._sync.client.Client object at 0x102c871c0&gt;)\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li><code>async</code> interface and standard synchronous interface.</li> <li>Fully type annotated.</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>For the basics, head over to the QuickStart. We also have Jupyter Notebook examples.</p> <p>More in depth developer documentation can be found in the API reference.</p>"},{"location":"#dependencies","title":"Dependencies","text":"<p>The sfapi_client project relies on these libraries:</p> <ul> <li><code>httpx</code> - HTTP support.</li> <li><code>authlib</code> - OAuth 2.0 authentication.</li> <li><code>pydantic</code> - Data models.</li> <li><code>tenacity</code> - Retry.</li> <li><code>datamodel-code-generator</code> - Generating data models from the Open API specification.</li> <li><code>unasync</code> - Generating synchronous interface from the async implementation.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install with pip:</p> <pre><code>$ pip install sfapi_client\n</code></pre>"},{"location":"community/contributing/","title":"Contributing","text":""},{"location":"community/contributing/#reporting-bugs","title":"Reporting Bugs","text":"<p>Please report issues here.</p>"},{"location":"community/contributing/#testing","title":"Testing","text":"<p>The client has a set of <code>pytest</code> test.  Many of these require SF API credentials to be run. To run the tests, use:</p> <pre><code>$ pytest\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<ul> <li>Getting Bearer Token</li> <li>Run Job And Check Status</li> <li>Check Current And Past Jobs</li> </ul>"},{"location":"examples/check_current_and_past_jobs/","title":"Check current and past jobs","text":"In\u00a0[1]: Copied! <pre># import client library\nfrom sfapi_client import AsyncClient\nfrom sfapi_client.compute import Machine\n\n\n# this will help display the outputs later\nimport json\n# Print our results nicely to the notebook\ndef print_json(j):\n    return print(json.dumps(j, indent=4))\n\n# Change this to your username\nuser_name=\"elvis\"\n</pre> # import client library from sfapi_client import AsyncClient from sfapi_client.compute import Machine   # this will help display the outputs later import json # Print our results nicely to the notebook def print_json(j):     return print(json.dumps(j, indent=4))  # Change this to your username user_name=\"elvis\" <p>The next lines of code will create a client which can be used to get an <code>Compute</code> object. This object can be used to look at the current and past job queues, list files and directories, and run simple commands on the system.</p> <p>In this example we will get the currently running jobs for the user <code>elvis</code>.</p> In\u00a0[2]: Copied! <pre>async with AsyncClient() as client:\n    perlmutter = await client.compute(Machine.perlmutter)\n    # This selects just the jobs in the regular cpu partition on perlmutter\n    jobs = await perlmutter.jobs(user=user_name, partition='regular_milan_ss11')\n</pre> async with AsyncClient() as client:     perlmutter = await client.compute(Machine.perlmutter)     # This selects just the jobs in the regular cpu partition on perlmutter     jobs = await perlmutter.jobs(user=user_name, partition='regular_milan_ss11') <p>All the jobs currently in the job queue are stored in the newly created <code>jobs</code> list. An easy way of viewing and this list is to print the objects in the list.</p> In\u00a0[3]: Copied! <pre>print_json([j.dict() for j in jobs])\n</pre> print_json([j.dict() for j in jobs]) <pre>[\n    {\n        \"account\": \"ntrain\",\n        \"tres_per_node\": \"N/A\",\n        \"min_cpus\": \"1\",\n        \"min_tmp_disk\": \"0\",\n        \"end_time\": \"N/A\",\n        \"features\": \"cpu\",\n        \"group\": \"12345\",\n        \"over_subscribe\": \"NO\",\n        \"jobid\": \"8407414\",\n        \"name\": \"large_job.sh\",\n        \"comment\": \"(null)\",\n        \"time_limit\": \"12:00:00\",\n        \"min_memory\": \"0\",\n        \"req_nodes\": \"\",\n        \"command\": \"/global/homes/e/elvis/job_subs/large_job.sh\",\n        \"priority\": \"67684\",\n        \"qos\": \"regular_1\",\n        \"reason\": \"Priority\",\n        \"field_\": null,\n        \"st\": \"PD\",\n        \"user\": \"elvis\",\n        \"reservation\": \"(null)\",\n        \"wckey\": \"(null)\",\n        \"exc_nodes\": \"\",\n        \"nice\": \"0\",\n        \"s_c_t\": \"*:*:*\",\n        \"exec_host\": \"n/a\",\n        \"cpus\": \"25\",\n        \"nodes\": \"25\",\n        \"dependency\": \"(null)\",\n        \"array_job_id\": \"8407414\",\n        \"sockets_per_node\": \"*\",\n        \"cores_per_socket\": \"*\",\n        \"threads_per_core\": \"*\",\n        \"array_task_id\": \"N/A\",\n        \"time_left\": \"12:00:00\",\n        \"time\": \"0:00\",\n        \"nodelist\": \"\",\n        \"contiguous\": \"0\",\n        \"partition\": \"regular_milan_ss11\",\n        \"nodelist_reason_\": \"(Priority)\",\n        \"start_time\": \"N/A\",\n        \"state\": \"PENDING\",\n        \"uid\": \"12345\",\n        \"submit_time\": \"2023-05-02T18:10:51\",\n        \"licenses\": \"u1:1\",\n        \"core_spec\": \"N/A\",\n        \"schednodes\": \"(null)\",\n        \"work_dir\": \"/global/homes/e/elvis/job_subs\"\n    },\n    {\n        \"account\": \"ntrain\",\n        \"tres_per_node\": \"N/A\",\n        \"min_cpus\": \"1\",\n        \"min_tmp_disk\": \"0\",\n        \"end_time\": \"N/A\",\n        \"features\": \"cpu\",\n        \"group\": \"12345\",\n        \"over_subscribe\": \"NO\",\n        \"jobid\": \"8407432\",\n        \"name\": \"large_job.sh\",\n        \"comment\": \"(null)\",\n        \"time_limit\": \"12:00:00\",\n        \"min_memory\": \"0\",\n        \"req_nodes\": \"\",\n        \"command\": \"/global/homes/e/elvis/job_subs/large_job.sh\",\n        \"priority\": \"67683\",\n        \"qos\": \"regular_1\",\n        \"reason\": \"Priority\",\n        \"field_\": null,\n        \"st\": \"PD\",\n        \"user\": \"elvis\",\n        \"reservation\": \"(null)\",\n        \"wckey\": \"(null)\",\n        \"exc_nodes\": \"\",\n        \"nice\": \"0\",\n        \"s_c_t\": \"*:*:*\",\n        \"exec_host\": \"n/a\",\n        \"cpus\": \"25\",\n        \"nodes\": \"25\",\n        \"dependency\": \"(null)\",\n        \"array_job_id\": \"8407432\",\n        \"sockets_per_node\": \"*\",\n        \"cores_per_socket\": \"*\",\n        \"threads_per_core\": \"*\",\n        \"array_task_id\": \"N/A\",\n        \"time_left\": \"12:00:00\",\n        \"time\": \"0:00\",\n        \"nodelist\": \"\",\n        \"contiguous\": \"0\",\n        \"partition\": \"regular_milan_ss11\",\n        \"nodelist_reason_\": \"(Priority)\",\n        \"start_time\": \"N/A\",\n        \"state\": \"PENDING\",\n        \"uid\": \"12345\",\n        \"submit_time\": \"2023-05-02T18:11:30\",\n        \"licenses\": \"u1:1\",\n        \"core_spec\": \"N/A\",\n        \"schednodes\": \"(null)\",\n        \"work_dir\": \"/global/homes/e/elvis/job_subs\"\n    }\n]\n</pre> <p>A single job can be pulled from the list for further inspection. This returns a <code>Squeue</code> object which is the output you would get from running the command <code>squeue</code> from slurm. This is useful for getting jobs which are currently pending or running.</p> In\u00a0[4]: Copied! <pre>jobs[0]\n</pre> jobs[0] Out[4]: <pre>AsyncJobSqueue(account='ntrain', tres_per_node='N/A', min_cpus='1', min_tmp_disk='0', end_time='N/A', features='cpu', group='12345', over_subscribe='NO', jobid='8407414', name='large_job.sh', comment='(null)', time_limit='12:00:00', min_memory='0', req_nodes='', command='/global/homes/e/elvis/job_subs/large_job.sh', priority='67684', qos='regular_1', reason='Priority', field_=None, st='PD', user='elvis', reservation='(null)', wckey='(null)', exc_nodes='', nice='0', s_c_t='*:*:*', exec_host='n/a', cpus='25', nodes='25', dependency='(null)', array_job_id='8407414', sockets_per_node='*', cores_per_socket='*', threads_per_core='*', array_task_id='N/A', time_left='12:00:00', time='0:00', nodelist='', contiguous='0', partition='regular_milan_ss11', nodelist_reason_='(Priority)', start_time='N/A', state=&lt;JobState.PENDING: 'PENDING'&gt;, uid='12345', submit_time='2023-05-02T18:10:51', licenses='u1:1', core_spec='N/A', schednodes='(null)', work_dir='/global/homes/e/elvis/job_subs', compute=AsyncCompute(name='perlmutter', full_name='Perlmutter', description='System is active', system_type='compute', notes=[], status=&lt;StatusValue.active: 'active'&gt;, updated_at=datetime.datetime(2023, 4, 28, 21, 19, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), client=&lt;sfapi_client._async.client.AsyncClient object at 0x10bb3ffd0&gt;))</pre> <p>More specific information about the job can also be gotten from this object like the number of nodes or it's <code>jobid</code>.</p> In\u00a0[5]: Copied! <pre>print(f\"Number of nodes = {jobs[0].nodes}\")\nprint(f\"jobid = {jobs[0].jobid}\")\n</pre> print(f\"Number of nodes = {jobs[0].nodes}\") print(f\"jobid = {jobs[0].jobid}\") <pre>Number of nodes = 25\njobid = 8407414\n</pre> <p>The information for a job can also be retrieved later based on the jobid. This can be useful for seeing if a job completed, failed, or was canceled.</p> In\u00a0[6]: Copied! <pre>async with AsyncClient() as client:\n    perlmutter = await client.compute(Machine.perlmutter)\n    # Get the running job based on it's job ID\n    job = await perlmutter.job(jobid=jobs[0].jobid)\n    # Print out the current status of the job\n\nprint_json(job.dict())\n</pre> async with AsyncClient() as client:     perlmutter = await client.compute(Machine.perlmutter)     # Get the running job based on it's job ID     job = await perlmutter.job(jobid=jobs[0].jobid)     # Print out the current status of the job  print_json(job.dict()) <pre>{\n    \"account\": \"ntrain\",\n    \"admincomment\": \"\",\n    \"alloccpus\": \"25\",\n    \"allocnodes\": \"0\",\n    \"alloctres\": \"\",\n    \"associd\": \"206287\",\n    \"avecpu\": \"\",\n    \"avecpufreq\": \"\",\n    \"avediskread\": \"\",\n    \"avediskwrite\": \"\",\n    \"avepages\": \"\",\n    \"averss\": \"\",\n    \"avevmsize\": \"\",\n    \"blockid\": \"\",\n    \"cluster\": \"perlmutter\",\n    \"comment\": \"\",\n    \"constraints\": \"cpu\",\n    \"consumedenergy\": \"0\",\n    \"consumedenergyraw\": \"0\",\n    \"cputime\": \"00:00:00\",\n    \"cputimeraw\": \"0\",\n    \"dbindex\": \"64266939\",\n    \"derivedexitcode\": \"0:0\",\n    \"elapsed\": \"00:00:00\",\n    \"elapsedraw\": \"0\",\n    \"eligible\": \"2023-05-02T18:10:51\",\n    \"end\": \"Unknown\",\n    \"exitcode\": \"0:0\",\n    \"flags\": \"StartRecieved\",\n    \"gid\": \"12345\",\n    \"group\": \"elvis\",\n    \"jobid\": \"8407414\",\n    \"jobidraw\": \"8407414\",\n    \"jobname\": \"large_job.sh\",\n    \"layout\": \"\",\n    \"maxdiskread\": \"\",\n    \"maxdiskreadnode\": \"\",\n    \"maxdiskreadtask\": \"\",\n    \"maxdiskwrite\": \"\",\n    \"maxdiskwritenode\": \"\",\n    \"maxdiskwritetask\": \"\",\n    \"maxpages\": \"\",\n    \"maxpagesnode\": \"\",\n    \"maxpagestask\": \"\",\n    \"maxrss\": \"\",\n    \"maxrssnode\": \"\",\n    \"maxrsstask\": \"\",\n    \"maxvmsize\": \"\",\n    \"maxvmsizenode\": \"\",\n    \"maxvmsizetask\": \"\",\n    \"mcslabel\": \"\",\n    \"mincpu\": \"\",\n    \"mincpunode\": \"\",\n    \"mincputask\": \"\",\n    \"ncpus\": \"25\",\n    \"nnodes\": \"25\",\n    \"nodelist\": \"None assigned\",\n    \"ntasks\": \"\",\n    \"priority\": \"67679\",\n    \"partition\": \"regular_milan_ss11\",\n    \"qos\": \"regular_1\",\n    \"qosraw\": \"16\",\n    \"reason\": \"None\",\n    \"reqcpufreq\": \"Unknown\",\n    \"reqcpufreqmin\": \"Unknown\",\n    \"reqcpufreqmax\": \"Unknown\",\n    \"reqcpufreqgov\": \"Unknown\",\n    \"reqcpus\": \"25\",\n    \"reqmem\": \"12200050M\",\n    \"reqnodes\": \"25\",\n    \"reqtres\": \"billing=25,cpu=25,mem=12200050M,node=25\",\n    \"reservation\": \"\",\n    \"reservationid\": \"\",\n    \"reserved\": null,\n    \"resvcpu\": null,\n    \"resvcpuraw\": null,\n    \"start\": \"Unknown\",\n    \"state\": \"PENDING\",\n    \"submit\": \"2023-05-02T18:10:51\",\n    \"suspended\": \"00:00:00\",\n    \"systemcpu\": \"00:00:00\",\n    \"systemcomment\": \"\",\n    \"timelimit\": \"12:00:00\",\n    \"timelimitraw\": \"720\",\n    \"totalcpu\": \"00:00:00\",\n    \"tresusageinave\": \"\",\n    \"tresusageinmax\": \"\",\n    \"tresusageinmaxnode\": \"\",\n    \"tresusageinmaxtask\": \"\",\n    \"tresusageinmin\": \"\",\n    \"tresusageinminnode\": \"\",\n    \"tresusageinmintask\": \"\",\n    \"tresusageintot\": \"\",\n    \"tresusageoutave\": \"\",\n    \"tresusageoutmax\": \"\",\n    \"tresusageoutmaxnode\": \"\",\n    \"tresusageoutmaxtask\": \"\",\n    \"tresusageoutmin\": \"\",\n    \"tresusageoutminnode\": \"\",\n    \"tresusageoutmintask\": \"\",\n    \"tresusageouttot\": \"\",\n    \"uid\": \"12345\",\n    \"user\": \"elvis\",\n    \"usercpu\": \"00:00:00\",\n    \"wckey\": \"\",\n    \"wckeyid\": \"0\",\n    \"workdir\": \"/global/homes/e/elvis/job_subs\"\n}\n</pre> <p>Multiple jobs can also be retrieved simultaniosly later on by creating a list of jobids. This can reduce the amount of calls needed to the Superfacility REST Api and get your results back</p> In\u00a0[7]: Copied! <pre>async with AsyncClient() as client:\n    perlmutter = await client.compute(Machine.perlmutter)\n    # Get the running job based on it's job ID\n    # This time we'll get information from sacct\n    jobs = await perlmutter.jobs(jobids=[jobs[0].jobid, jobs[1].jobid], command='sacct')\n    # Print out the current status of the job\n\nprint_json([j.dict() for j in jobs])\n</pre> async with AsyncClient() as client:     perlmutter = await client.compute(Machine.perlmutter)     # Get the running job based on it's job ID     # This time we'll get information from sacct     jobs = await perlmutter.jobs(jobids=[jobs[0].jobid, jobs[1].jobid], command='sacct')     # Print out the current status of the job  print_json([j.dict() for j in jobs]) <pre>[\n    {\n        \"account\": \"ntrain\",\n        \"admincomment\": \"\",\n        \"alloccpus\": \"25\",\n        \"allocnodes\": \"0\",\n        \"alloctres\": \"\",\n        \"associd\": \"206287\",\n        \"avecpu\": \"\",\n        \"avecpufreq\": \"\",\n        \"avediskread\": \"\",\n        \"avediskwrite\": \"\",\n        \"avepages\": \"\",\n        \"averss\": \"\",\n        \"avevmsize\": \"\",\n        \"blockid\": \"\",\n        \"cluster\": \"perlmutter\",\n        \"comment\": \"\",\n        \"constraints\": \"cpu\",\n        \"consumedenergy\": \"0\",\n        \"consumedenergyraw\": \"0\",\n        \"cputime\": \"00:00:00\",\n        \"cputimeraw\": \"0\",\n        \"dbindex\": \"64266939\",\n        \"derivedexitcode\": \"0:0\",\n        \"elapsed\": \"00:00:00\",\n        \"elapsedraw\": \"0\",\n        \"eligible\": \"2023-05-02T18:10:51\",\n        \"end\": \"Unknown\",\n        \"exitcode\": \"0:0\",\n        \"flags\": \"StartRecieved\",\n        \"gid\": \"12345\",\n        \"group\": \"elvis\",\n        \"jobid\": \"8407414\",\n        \"jobidraw\": \"8407414\",\n        \"jobname\": \"large_job.sh\",\n        \"layout\": \"\",\n        \"maxdiskread\": \"\",\n        \"maxdiskreadnode\": \"\",\n        \"maxdiskreadtask\": \"\",\n        \"maxdiskwrite\": \"\",\n        \"maxdiskwritenode\": \"\",\n        \"maxdiskwritetask\": \"\",\n        \"maxpages\": \"\",\n        \"maxpagesnode\": \"\",\n        \"maxpagestask\": \"\",\n        \"maxrss\": \"\",\n        \"maxrssnode\": \"\",\n        \"maxrsstask\": \"\",\n        \"maxvmsize\": \"\",\n        \"maxvmsizenode\": \"\",\n        \"maxvmsizetask\": \"\",\n        \"mcslabel\": \"\",\n        \"mincpu\": \"\",\n        \"mincpunode\": \"\",\n        \"mincputask\": \"\",\n        \"ncpus\": \"25\",\n        \"nnodes\": \"25\",\n        \"nodelist\": \"None assigned\",\n        \"ntasks\": \"\",\n        \"priority\": \"67679\",\n        \"partition\": \"regular_milan_ss11\",\n        \"qos\": \"regular_1\",\n        \"qosraw\": \"16\",\n        \"reason\": \"None\",\n        \"reqcpufreq\": \"Unknown\",\n        \"reqcpufreqmin\": \"Unknown\",\n        \"reqcpufreqmax\": \"Unknown\",\n        \"reqcpufreqgov\": \"Unknown\",\n        \"reqcpus\": \"25\",\n        \"reqmem\": \"12200050M\",\n        \"reqnodes\": \"25\",\n        \"reqtres\": \"billing=25,cpu=25,mem=12200050M,node=25\",\n        \"reservation\": \"\",\n        \"reservationid\": \"\",\n        \"reserved\": null,\n        \"resvcpu\": null,\n        \"resvcpuraw\": null,\n        \"start\": \"Unknown\",\n        \"state\": \"PENDING\",\n        \"submit\": \"2023-05-02T18:10:51\",\n        \"suspended\": \"00:00:00\",\n        \"systemcpu\": \"00:00:00\",\n        \"systemcomment\": \"\",\n        \"timelimit\": \"12:00:00\",\n        \"timelimitraw\": \"720\",\n        \"totalcpu\": \"00:00:00\",\n        \"tresusageinave\": \"\",\n        \"tresusageinmax\": \"\",\n        \"tresusageinmaxnode\": \"\",\n        \"tresusageinmaxtask\": \"\",\n        \"tresusageinmin\": \"\",\n        \"tresusageinminnode\": \"\",\n        \"tresusageinmintask\": \"\",\n        \"tresusageintot\": \"\",\n        \"tresusageoutave\": \"\",\n        \"tresusageoutmax\": \"\",\n        \"tresusageoutmaxnode\": \"\",\n        \"tresusageoutmaxtask\": \"\",\n        \"tresusageoutmin\": \"\",\n        \"tresusageoutminnode\": \"\",\n        \"tresusageoutmintask\": \"\",\n        \"tresusageouttot\": \"\",\n        \"uid\": \"12345\",\n        \"user\": \"elvis\",\n        \"usercpu\": \"00:00:00\",\n        \"wckey\": \"\",\n        \"wckeyid\": \"0\",\n        \"workdir\": \"/global/homes/e/elvis/job_subs\"\n    },\n    {\n        \"account\": \"ntrain\",\n        \"admincomment\": \"\",\n        \"alloccpus\": \"25\",\n        \"allocnodes\": \"0\",\n        \"alloctres\": \"\",\n        \"associd\": \"206287\",\n        \"avecpu\": \"\",\n        \"avecpufreq\": \"\",\n        \"avediskread\": \"\",\n        \"avediskwrite\": \"\",\n        \"avepages\": \"\",\n        \"averss\": \"\",\n        \"avevmsize\": \"\",\n        \"blockid\": \"\",\n        \"cluster\": \"perlmutter\",\n        \"comment\": \"\",\n        \"constraints\": \"cpu\",\n        \"consumedenergy\": \"0\",\n        \"consumedenergyraw\": \"0\",\n        \"cputime\": \"00:00:00\",\n        \"cputimeraw\": \"0\",\n        \"dbindex\": \"64267039\",\n        \"derivedexitcode\": \"0:0\",\n        \"elapsed\": \"00:00:00\",\n        \"elapsedraw\": \"0\",\n        \"eligible\": \"2023-05-02T18:11:30\",\n        \"end\": \"Unknown\",\n        \"exitcode\": \"0:0\",\n        \"flags\": \"StartRecieved\",\n        \"gid\": \"12345\",\n        \"group\": \"elvis\",\n        \"jobid\": \"8407432\",\n        \"jobidraw\": \"8407432\",\n        \"jobname\": \"large_job.sh\",\n        \"layout\": \"\",\n        \"maxdiskread\": \"\",\n        \"maxdiskreadnode\": \"\",\n        \"maxdiskreadtask\": \"\",\n        \"maxdiskwrite\": \"\",\n        \"maxdiskwritenode\": \"\",\n        \"maxdiskwritetask\": \"\",\n        \"maxpages\": \"\",\n        \"maxpagesnode\": \"\",\n        \"maxpagestask\": \"\",\n        \"maxrss\": \"\",\n        \"maxrssnode\": \"\",\n        \"maxrsstask\": \"\",\n        \"maxvmsize\": \"\",\n        \"maxvmsizenode\": \"\",\n        \"maxvmsizetask\": \"\",\n        \"mcslabel\": \"\",\n        \"mincpu\": \"\",\n        \"mincpunode\": \"\",\n        \"mincputask\": \"\",\n        \"ncpus\": \"25\",\n        \"nnodes\": \"25\",\n        \"nodelist\": \"None assigned\",\n        \"ntasks\": \"\",\n        \"priority\": \"67679\",\n        \"partition\": \"regular_milan_ss11\",\n        \"qos\": \"regular_1\",\n        \"qosraw\": \"16\",\n        \"reason\": \"None\",\n        \"reqcpufreq\": \"Unknown\",\n        \"reqcpufreqmin\": \"Unknown\",\n        \"reqcpufreqmax\": \"Unknown\",\n        \"reqcpufreqgov\": \"Unknown\",\n        \"reqcpus\": \"25\",\n        \"reqmem\": \"12200050M\",\n        \"reqnodes\": \"25\",\n        \"reqtres\": \"billing=25,cpu=25,mem=12200050M,node=25\",\n        \"reservation\": \"\",\n        \"reservationid\": \"\",\n        \"reserved\": null,\n        \"resvcpu\": null,\n        \"resvcpuraw\": null,\n        \"start\": \"Unknown\",\n        \"state\": \"PENDING\",\n        \"submit\": \"2023-05-02T18:11:30\",\n        \"suspended\": \"00:00:00\",\n        \"systemcpu\": \"00:00:00\",\n        \"systemcomment\": \"\",\n        \"timelimit\": \"12:00:00\",\n        \"timelimitraw\": \"720\",\n        \"totalcpu\": \"00:00:00\",\n        \"tresusageinave\": \"\",\n        \"tresusageinmax\": \"\",\n        \"tresusageinmaxnode\": \"\",\n        \"tresusageinmaxtask\": \"\",\n        \"tresusageinmin\": \"\",\n        \"tresusageinminnode\": \"\",\n        \"tresusageinmintask\": \"\",\n        \"tresusageintot\": \"\",\n        \"tresusageoutave\": \"\",\n        \"tresusageoutmax\": \"\",\n        \"tresusageoutmaxnode\": \"\",\n        \"tresusageoutmaxtask\": \"\",\n        \"tresusageoutmin\": \"\",\n        \"tresusageoutminnode\": \"\",\n        \"tresusageoutmintask\": \"\",\n        \"tresusageouttot\": \"\",\n        \"uid\": \"12345\",\n        \"user\": \"elvis\",\n        \"usercpu\": \"00:00:00\",\n        \"wckey\": \"\",\n        \"wckeyid\": \"0\",\n        \"workdir\": \"/global/homes/e/elvis/job_subs\"\n    }\n]\n</pre> <p>Jobs can also be interacted with later based on their jobid. This includes canceling the jobs and seeing their final status.</p> In\u00a0[8]: Copied! <pre>async with AsyncClient() as client:\n    perlmutter = await client.compute(Machine.perlmutter)\n    # Get the running job based on it's job ID\n    # This time we'll get information from sacct\n    jobs = await perlmutter.jobs(jobids=[jobs[0].jobid, jobs[1].jobid], command='sacct')\n    for job in jobs:\n        await job.cancel(wait=True)\n        await job.update()\n    \n\nprint_json([j.dict() for j in jobs])\n</pre> async with AsyncClient() as client:     perlmutter = await client.compute(Machine.perlmutter)     # Get the running job based on it's job ID     # This time we'll get information from sacct     jobs = await perlmutter.jobs(jobids=[jobs[0].jobid, jobs[1].jobid], command='sacct')     for job in jobs:         await job.cancel(wait=True)         await job.update()       print_json([j.dict() for j in jobs]) <pre>[\n    {\n        \"account\": \"ntrain\",\n        \"admincomment\": \"{\\\"resizing\\\":0,\\\"features\\\":\\\"cpu\\\",\\\"arrayTaskId\\\":4294967294,\\\"qos\\\":\\\"regular_1\\\",\\\"arrayJobId\\\":0,\\\"jobAccount\\\":\\\"ntrain\\\",\\\"submitTime\\\":1683076251,\\\"partition\\\":\\\"regular_milan_ss11\\\",\\\"uid\\\":12345,\\\"cluster\\\":\\\"perlmutter\\\",\\\"argv\\\":[\\\"\\\\/global\\\\/u1\\\\/t\\\\/elvis\\\\/job_subs\\\\/large_job.sh\\\"],\\\"gresRequest\\\":\\\"cpu=25,mem=12200050M,node=25,billing=25\\\",\\\"licenses\\\":\\\"u1:1\\\",\\\"name\\\":\\\"large_job.sh\\\",\\\"stdinPath\\\":\\\"\\\\/dev\\\\/null\\\",\\\"timeLimit\\\":720,\\\"packJobId\\\":0,\\\"jobId\\\":8407414,\\\"allocNodes\\\":0,\\\"allocCpus\\\":0,\\\"workingDirectory\\\":\\\"\\\\/global\\\\/u1\\\\/t\\\\/elvis\\\\/job_subs\\\",\\\"restartCnt\\\":0,\\\"jobExitCode\\\":0,\\\"reboot\\\":0,\\\"startTime\\\":1683077035,\\\"priority\\\":67684,\\\"endTime\\\":1683077035,\\\"jobDerivedExitCode\\\":0,\\\"packJobOffset\\\":0}\",\n        \"alloccpus\": \"25\",\n        \"allocnodes\": \"0\",\n        \"alloctres\": \"\",\n        \"associd\": \"206287\",\n        \"avecpu\": \"\",\n        \"avecpufreq\": \"\",\n        \"avediskread\": \"\",\n        \"avediskwrite\": \"\",\n        \"avepages\": \"\",\n        \"averss\": \"\",\n        \"avevmsize\": \"\",\n        \"blockid\": \"\",\n        \"cluster\": \"perlmutter\",\n        \"comment\": \"\",\n        \"constraints\": \"cpu\",\n        \"consumedenergy\": \"0\",\n        \"consumedenergyraw\": \"0\",\n        \"cputime\": \"00:00:00\",\n        \"cputimeraw\": \"0\",\n        \"dbindex\": \"64266939\",\n        \"derivedexitcode\": \"0:0\",\n        \"elapsed\": \"00:00:00\",\n        \"elapsedraw\": \"0\",\n        \"eligible\": \"2023-05-02T18:10:51\",\n        \"end\": \"2023-05-02T18:23:55\",\n        \"exitcode\": \"0:0\",\n        \"flags\": \"StartRecieved\",\n        \"gid\": \"12345\",\n        \"group\": \"elvis\",\n        \"jobid\": \"8407414\",\n        \"jobidraw\": \"8407414\",\n        \"jobname\": \"large_job.sh\",\n        \"layout\": \"\",\n        \"maxdiskread\": \"\",\n        \"maxdiskreadnode\": \"\",\n        \"maxdiskreadtask\": \"\",\n        \"maxdiskwrite\": \"\",\n        \"maxdiskwritenode\": \"\",\n        \"maxdiskwritetask\": \"\",\n        \"maxpages\": \"\",\n        \"maxpagesnode\": \"\",\n        \"maxpagestask\": \"\",\n        \"maxrss\": \"\",\n        \"maxrssnode\": \"\",\n        \"maxrsstask\": \"\",\n        \"maxvmsize\": \"\",\n        \"maxvmsizenode\": \"\",\n        \"maxvmsizetask\": \"\",\n        \"mcslabel\": \"\",\n        \"mincpu\": \"\",\n        \"mincpunode\": \"\",\n        \"mincputask\": \"\",\n        \"ncpus\": \"25\",\n        \"nnodes\": \"25\",\n        \"nodelist\": \"None assigned\",\n        \"ntasks\": \"\",\n        \"priority\": \"67679\",\n        \"partition\": \"regular_milan_ss11\",\n        \"qos\": \"regular_1\",\n        \"qosraw\": \"16\",\n        \"reason\": \"None\",\n        \"reqcpufreq\": \"Unknown\",\n        \"reqcpufreqmin\": \"Unknown\",\n        \"reqcpufreqmax\": \"Unknown\",\n        \"reqcpufreqgov\": \"Unknown\",\n        \"reqcpus\": \"25\",\n        \"reqmem\": \"12200050M\",\n        \"reqnodes\": \"25\",\n        \"reqtres\": \"billing=25,cpu=25,mem=12200050M,node=25\",\n        \"reservation\": \"\",\n        \"reservationid\": \"\",\n        \"reserved\": null,\n        \"resvcpu\": null,\n        \"resvcpuraw\": null,\n        \"start\": \"None\",\n        \"state\": \"CANCELLED\",\n        \"submit\": \"2023-05-02T18:10:51\",\n        \"suspended\": \"00:00:00\",\n        \"systemcpu\": \"00:00:00\",\n        \"systemcomment\": \"\",\n        \"timelimit\": \"12:00:00\",\n        \"timelimitraw\": \"720\",\n        \"totalcpu\": \"00:00:00\",\n        \"tresusageinave\": \"\",\n        \"tresusageinmax\": \"\",\n        \"tresusageinmaxnode\": \"\",\n        \"tresusageinmaxtask\": \"\",\n        \"tresusageinmin\": \"\",\n        \"tresusageinminnode\": \"\",\n        \"tresusageinmintask\": \"\",\n        \"tresusageintot\": \"\",\n        \"tresusageoutave\": \"\",\n        \"tresusageoutmax\": \"\",\n        \"tresusageoutmaxnode\": \"\",\n        \"tresusageoutmaxtask\": \"\",\n        \"tresusageoutmin\": \"\",\n        \"tresusageoutminnode\": \"\",\n        \"tresusageoutmintask\": \"\",\n        \"tresusageouttot\": \"\",\n        \"uid\": \"12345\",\n        \"user\": \"elvis\",\n        \"usercpu\": \"00:00:00\",\n        \"wckey\": \"\",\n        \"wckeyid\": \"0\",\n        \"workdir\": \"/global/homes/e/elvis/job_subs\"\n    },\n    {\n        \"account\": \"ntrain\",\n        \"admincomment\": \"{\\\"resizing\\\":0,\\\"features\\\":\\\"cpu\\\",\\\"arrayTaskId\\\":4294967294,\\\"qos\\\":\\\"regular_1\\\",\\\"arrayJobId\\\":0,\\\"jobAccount\\\":\\\"ntrain\\\",\\\"submitTime\\\":1683076290,\\\"partition\\\":\\\"regular_milan_ss11\\\",\\\"uid\\\":12345,\\\"cluster\\\":\\\"perlmutter\\\",\\\"argv\\\":[\\\"\\\\/global\\\\/u1\\\\/t\\\\/elvis\\\\/job_subs\\\\/large_job.sh\\\"],\\\"gresRequest\\\":\\\"cpu=25,mem=12200050M,node=25,billing=25\\\",\\\"licenses\\\":\\\"u1:1\\\",\\\"name\\\":\\\"large_job.sh\\\",\\\"stdinPath\\\":\\\"\\\\/dev\\\\/null\\\",\\\"timeLimit\\\":720,\\\"packJobId\\\":0,\\\"jobId\\\":8407432,\\\"allocNodes\\\":0,\\\"allocCpus\\\":0,\\\"workingDirectory\\\":\\\"\\\\/global\\\\/u1\\\\/t\\\\/elvis\\\\/job_subs\\\",\\\"restartCnt\\\":0,\\\"jobExitCode\\\":0,\\\"reboot\\\":0,\\\"startTime\\\":1683077066,\\\"priority\\\":67683,\\\"endTime\\\":1683077066,\\\"jobDerivedExitCode\\\":0,\\\"packJobOffset\\\":0}\",\n        \"alloccpus\": \"25\",\n        \"allocnodes\": \"0\",\n        \"alloctres\": \"\",\n        \"associd\": \"206287\",\n        \"avecpu\": \"\",\n        \"avecpufreq\": \"\",\n        \"avediskread\": \"\",\n        \"avediskwrite\": \"\",\n        \"avepages\": \"\",\n        \"averss\": \"\",\n        \"avevmsize\": \"\",\n        \"blockid\": \"\",\n        \"cluster\": \"perlmutter\",\n        \"comment\": \"\",\n        \"constraints\": \"cpu\",\n        \"consumedenergy\": \"0\",\n        \"consumedenergyraw\": \"0\",\n        \"cputime\": \"00:00:00\",\n        \"cputimeraw\": \"0\",\n        \"dbindex\": \"64267039\",\n        \"derivedexitcode\": \"0:0\",\n        \"elapsed\": \"00:00:00\",\n        \"elapsedraw\": \"0\",\n        \"eligible\": \"2023-05-02T18:11:30\",\n        \"end\": \"2023-05-02T18:24:26\",\n        \"exitcode\": \"0:0\",\n        \"flags\": \"StartRecieved\",\n        \"gid\": \"12345\",\n        \"group\": \"elvis\",\n        \"jobid\": \"8407432\",\n        \"jobidraw\": \"8407432\",\n        \"jobname\": \"large_job.sh\",\n        \"layout\": \"\",\n        \"maxdiskread\": \"\",\n        \"maxdiskreadnode\": \"\",\n        \"maxdiskreadtask\": \"\",\n        \"maxdiskwrite\": \"\",\n        \"maxdiskwritenode\": \"\",\n        \"maxdiskwritetask\": \"\",\n        \"maxpages\": \"\",\n        \"maxpagesnode\": \"\",\n        \"maxpagestask\": \"\",\n        \"maxrss\": \"\",\n        \"maxrssnode\": \"\",\n        \"maxrsstask\": \"\",\n        \"maxvmsize\": \"\",\n        \"maxvmsizenode\": \"\",\n        \"maxvmsizetask\": \"\",\n        \"mcslabel\": \"\",\n        \"mincpu\": \"\",\n        \"mincpunode\": \"\",\n        \"mincputask\": \"\",\n        \"ncpus\": \"25\",\n        \"nnodes\": \"25\",\n        \"nodelist\": \"None assigned\",\n        \"ntasks\": \"\",\n        \"priority\": \"67679\",\n        \"partition\": \"regular_milan_ss11\",\n        \"qos\": \"regular_1\",\n        \"qosraw\": \"16\",\n        \"reason\": \"None\",\n        \"reqcpufreq\": \"Unknown\",\n        \"reqcpufreqmin\": \"Unknown\",\n        \"reqcpufreqmax\": \"Unknown\",\n        \"reqcpufreqgov\": \"Unknown\",\n        \"reqcpus\": \"25\",\n        \"reqmem\": \"12200050M\",\n        \"reqnodes\": \"25\",\n        \"reqtres\": \"billing=25,cpu=25,mem=12200050M,node=25\",\n        \"reservation\": \"\",\n        \"reservationid\": \"\",\n        \"reserved\": null,\n        \"resvcpu\": null,\n        \"resvcpuraw\": null,\n        \"start\": \"None\",\n        \"state\": \"CANCELLED\",\n        \"submit\": \"2023-05-02T18:11:30\",\n        \"suspended\": \"00:00:00\",\n        \"systemcpu\": \"00:00:00\",\n        \"systemcomment\": \"\",\n        \"timelimit\": \"12:00:00\",\n        \"timelimitraw\": \"720\",\n        \"totalcpu\": \"00:00:00\",\n        \"tresusageinave\": \"\",\n        \"tresusageinmax\": \"\",\n        \"tresusageinmaxnode\": \"\",\n        \"tresusageinmaxtask\": \"\",\n        \"tresusageinmin\": \"\",\n        \"tresusageinminnode\": \"\",\n        \"tresusageinmintask\": \"\",\n        \"tresusageintot\": \"\",\n        \"tresusageoutave\": \"\",\n        \"tresusageoutmax\": \"\",\n        \"tresusageoutmaxnode\": \"\",\n        \"tresusageoutmaxtask\": \"\",\n        \"tresusageoutmin\": \"\",\n        \"tresusageoutminnode\": \"\",\n        \"tresusageoutmintask\": \"\",\n        \"tresusageouttot\": \"\",\n        \"uid\": \"12345\",\n        \"user\": \"elvis\",\n        \"usercpu\": \"00:00:00\",\n        \"wckey\": \"\",\n        \"wckeyid\": \"0\",\n        \"workdir\": \"/global/homes/e/elvis/job_subs\"\n    }\n]\n</pre>"},{"location":"examples/check_current_and_past_jobs/#check-currently-running-jobs","title":"Check currently running jobs\u00b6","text":"<p>The <code>sfapi_client</code> can easily be used to get your current jobs running on the system, or information about past jobs.</p> <p>First we'll import the required libraries, <code>AsyncClient</code>  to handle the requests and the <code>Machine</code> enum to get the correct resource.</p>"},{"location":"examples/getting_bearer_token/","title":"Getting bearer token","text":"In\u00a0[1]: Copied! <pre>from sfapi_client import AsyncClient\nfrom pathlib import Path\n\nkey = Path(\"/path/to/sfapi_key.pem\")\n\nasync with AsyncClient(key=key) as client:\n    token = await client.token\n\nprint(token)\n</pre> from sfapi_client import AsyncClient from pathlib import Path  key = Path(\"/path/to/sfapi_key.pem\")  async with AsyncClient(key=key) as client:     token = await client.token  print(token) <pre>eyJraWQiOiJST3AzIiwidHlwIjoiYXQrand0IiwiYWxnIjoiUlMyNTYifQ.2oEEDDpuySRjIuy4XstdiWt3mnHLtw0cgqUOzm9oAp1Vb3aY2HPRbUj4yIIP9BwHb3r5AxNHTYomFyffyhVLt3pdqymXS4ZzffUJRYF85hByWeJrmt6eZz87C4R0bDppE7sM7MxAepSQt7YxwO4neVkiy7DeitwNh0a7MYISfR9OiTcGfXm681JTi5rnKyzXueSuaPxPiVLswWggGJOGwH0XHQY9KYI33G4LgrBkXuRSZ2htfDbInZo9BVUW8NOd0RfZSPpEpaCGPNP17WY1RdMXw5ahSOMKBZGsjjTjH9oKolxw.bOiTj4tALM9PXOeNuOeunYRaFXrMA7jGi9yNCErB3HdgavgNnFd2qrhJiybgItQTmZwKrLFhau6qgJI6f7hnMkvlzW8u6y3LftUK3b2eLcGoYFh5eZKFz1lmyfRvwqsBGyfGhegMlHQZKhSgopTJZJTxofrA5jAfqmrQ6jCECCoA16bWik0NsGNl1pjitOgVdj9jPdjrWvRofmqQaFfL4KCtqA8vjkgJjppCO7JlAVtGUuSxGJhfFG8R3otJzmT1JmE3RHYOCFk6MgpBPQX9FWz2XFVHnEr3onm571BMKVDZuDPAL9P8PKEkr1IMMrXjOJqC6A3tzcTXo3iB7GnnDl\n</pre> <p>To use the token, click on <code>Authorize</code> and paste the token into the box as the value, and click <code>Authorize</code>.</p>"},{"location":"examples/getting_bearer_token/#testing-using-the-web-ui","title":"Testing using the web UI\u00b6","text":"<p>When testing it can be helpful to use the API web UI. In order to login to the web UI you will need to provide a bearer token which can easily be printed from the <code>sfapi_client</code> after authenticating.</p>"},{"location":"examples/run_job_and_check_status/","title":"Run job and check status","text":"In\u00a0[1]: Copied! <pre>from sfapi_client import Client\nfrom sfapi_client.compute import Machine\n\nuser_name = \"elvis\"\n\n### This gets your home based on your username\nuser_home = f'/global/homes/{user_name[0]}/{user_name}'\n</pre> from sfapi_client import Client from sfapi_client.compute import Machine  user_name = \"elvis\"  ### This gets your home based on your username user_home = f'/global/homes/{user_name[0]}/{user_name}' <p>First we make a client to connect connect with the REST api. The client will read in a file from the directory <code>$HOME/.superfacility</code> in the pem format.</p> <pre>CLIENT_ID\n-----BEGIN RSA PRIVATE KEY-----\n...\n-----END RSA PRIVATE KEY-----\n</pre> <p>Or in a json format.</p> <pre>{\n    \"client_id\" : \"CLIENT_ID\",\n    \"secret\" : \"{...}\"\n}\n</pre> <p>A full path to the file can also be given to the client to load in a different client_id and secret.</p> <pre>client = Client(key_name=\"/full/path/to/key.pem\")\n</pre> In\u00a0[2]: Copied! <pre>client = Client()\n</pre> client = Client() In\u00a0[3]: Copied! <pre>client.compute(\"perlmutter\").status\n</pre> client.compute(\"perlmutter\").status Out[3]: <pre>&lt;StatusValue.active: 'active'&gt;</pre> In\u00a0[4]: Copied! <pre>perlmutter = client.compute(Machine.perlmutter)\n</pre> perlmutter = client.compute(Machine.perlmutter) In\u00a0[5]: Copied! <pre>import random\nrandom.seed(7)\n\n\nscript = f\"\"\"#!/bin/bash\n#SBATCH -C cpu\n#SBATCH -q shared\n#SBATCH -N 1\n#SBATCH -c 1\n#SBATCH -t 1\n#SBATCH -o {user_home}/sfapi_demo.txt\n\n\necho \"Completed run {random.randint(1, 100)}\"\n\"\"\"\n\nprint(script)\n</pre> import random random.seed(7)   script = f\"\"\"#!/bin/bash #SBATCH -C cpu #SBATCH -q shared #SBATCH -N 1 #SBATCH -c 1 #SBATCH -t 1 #SBATCH -o {user_home}/sfapi_demo.txt   echo \"Completed run {random.randint(1, 100)}\" \"\"\"  print(script) <pre>#!/bin/bash\n#SBATCH -C cpu\n#SBATCH -q shared\n#SBATCH -N 1\n#SBATCH -c 1\n#SBATCH -t 1\n#SBATCH -o /global/homes/e/elvis/sfapi_demo.txt\n\n\necho \"Completed run 42\"\n\n</pre> In\u00a0[6]: Copied! <pre>job = perlmutter.submit_job(script)\n</pre> job = perlmutter.submit_job(script) <p>The job object will contain information about the job on the system including it's current status and job id.</p> In\u00a0[7]: Copied! <pre>job.jobid\n</pre> job.jobid Out[7]: <pre>'8407751'</pre> <p>To get the most recent information about the job you can ask the server to update the job. The <code>PENDING</code> state in this example means that the job is waiting on the request resources to become available to run.</p> In\u00a0[8]: Copied! <pre>job.update()\njob.state\n</pre> job.update() job.state Out[8]: <pre>&lt;JobState.PENDING: 'PENDING'&gt;</pre> <p>We can also wait for the job to complete, which can be helpful if the job needs to be finished before another process starts.</p> In\u00a0[9]: Copied! <pre>%%time\njob.complete()\n</pre> %%time job.complete() <pre>CPU times: user 26.1 ms, sys: 5.37 ms, total: 31.5 ms\nWall time: 43.3 s\n</pre> Out[9]: <pre>&lt;JobState.COMPLETED: 'COMPLETED'&gt;</pre> <p>Once the job is complete we can make sure it produced the expected output file <code>sfapi_demo.txt</code> using the <code>ls</code> command on the compute site perlmutter.</p> In\u00a0[10]: Copied! <pre>output_file = perlmutter.ls(f\"{user_home}/sfapi_demo.txt\")\noutput_file = output_file[0]\noutput_file.is_file()\n</pre> output_file = perlmutter.ls(f\"{user_home}/sfapi_demo.txt\") output_file = output_file[0] output_file.is_file() Out[10]: <pre>True</pre> <p>We can also read the contents of small files by opening the file on the remote filesystem.</p> In\u00a0[11]: Copied! <pre>with output_file.open(\"r\") as f:\n    print(f.read())\n</pre> with output_file.open(\"r\") as f:     print(f.read()) <pre>Completed run 42\n\n</pre> <p>At the end of working with the client it should be closed.</p> In\u00a0[12]: Copied! <pre>client.close()\n</pre> client.close()"},{"location":"examples/run_job_and_check_status/#run-a-job-and-check-its-status","title":"Run a job and check it's status\u00b6","text":"<p>In this example we will show how to use the sfapi_client to run a job on Perlmutter at NERSC. Wait for the job to complete and look at the resulting output file to see that the job ran successfully.</p>"},{"location":"examples/run_job_and_check_status/#creates-our-client-object","title":"Creates our client object\u00b6","text":""},{"location":"examples/run_job_and_check_status/#before-we-start-lets-check-that-perlmutter-is-up","title":"Before we start let's check that Perlmutter is up\u00b6","text":"<p>In this example we are getting the resource by the string name <code>\"perlmutter\"</code>.</p>"},{"location":"examples/run_job_and_check_status/#once-the-client-is-configured-we-get-a-compute-object-for-perlmutter","title":"Once the client is configured we get a compute object for Perlmutter\u00b6","text":"<p>You can also get the compute with names stored inside the <code>Machine</code> <code>enum</code>.</p>"},{"location":"examples/run_job_and_check_status/#lets-create-a-submit-script","title":"Let's create a submit script\u00b6","text":"<p>We'll start with a basic \"Hello world\" to get started!</p>"},{"location":"examples/run_job_and_check_status/#once-we-have-the-script-it-can-be-submitted-as-a-job","title":"Once we have the script it can be submitted as a job\u00b6","text":""},{"location":"quickstart/","title":"QuickStart","text":"<p>This will be a basic guide to using the <code>sfapi_client</code>. Documentation on all the features can be found under the API Reference, and example jupyter notebooks can be found in Examples.</p>"},{"location":"quickstart/#installation","title":"Installation","text":"<p>The library is available on PyPi and installable with <code>pip</code>.</p> <pre><code>pip install sfapi_client\n</code></pre>"},{"location":"quickstart/#importing-the-client","title":"Importing the Client","text":"<p>The client can be imported into your existing python codes by importing the client you want to use.</p> asyncsync <pre><code>&gt;&gt;&gt; from sfapi_client import AsyncClient\n</code></pre> <pre><code>&gt;&gt;&gt; from sfapi_client import Client\n</code></pre>"},{"location":"quickstart/#getting-system-status","title":"Getting system status","text":"<p>The status of the compute machines as well as other resources available at NERSC can be fetched without authentication. Here's an example of getting the status of Perlmutter.</p> asyncsync <pre><code>&gt;&gt;&gt; from sfapi_client import AsyncClient\n&gt;&gt;&gt; from sfapi_client.compute import Machine\n&gt;&gt;&gt; async with AsyncClient() as client:\n...     status = await client.compute(Machine.perlmutter)\n...\n&gt;&gt;&gt; status\nAsyncCompute(name='perlmutter', full_name='Perlmutter', description='System is active', system_type='compute', notes=[], status=&lt;StatusValue.active: 'active'&gt;, updated_at=datetime.datetime(2023, 5, 11, 13, 50, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), client=&lt;sfapi_client._async.client.AsyncClient object at 0x1070b0790&gt;)\n</code></pre> <pre><code>&gt;&gt;&gt; from sfapi_client import Client\n&gt;&gt;&gt; from sfapi_client.compute import Machine\n&gt;&gt;&gt; with Client() as client:\n...     status = client.compute(Machine.perlmutter)\n...\n&gt;&gt;&gt; status\nCompute(name='perlmutter', full_name='Perlmutter', description='System is active', system_type='compute', notes=[], status=&lt;StatusValue.active: 'active'&gt;, updated_at=datetime.datetime(2023, 5, 11, 13, 50, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), client=&lt;sfapi_client._sync.client.Client object at 0x10679afe0&gt;)\n</code></pre> <p>And an example of getting the most recent outages for a resource such as Spin.</p> asyncsync <pre><code>&gt;&gt;&gt; from sfapi_client import AsyncClient\n&gt;&gt;&gt; from sfapi_client import Resource\n&gt;&gt;&gt; async with AsyncClient() as client:\n...     outages = await client.resources.outages(Resource.spin)\n...\n&gt;&gt;&gt; outages[0]\nOutage(name='spin', start_at=datetime.datetime(2023, 5, 5, 13, 50, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), end_at=datetime.datetime(2023, 5, 5, 15, 30, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), description='System Degraded', notes='The Rancher 2 development cluster was unavailable from 13:50-14:10 due to a control plane node RAM shortage combined with reaching a ceiling on total cluster pod count. Staff increased RAM and unanimously agreed to raise the pod count ceiling; workloads will be briefly unavailable (1-2 min) for rolling node reboots.', status='Completed', swo='degr', update_at=None)\n</code></pre> <pre><code>&gt;&gt;&gt; from sfapi_client import Client\n&gt;&gt;&gt; from sfapi_client import Resource\n&gt;&gt;&gt; with Client() as client:\n...     outages = client.resources.outages(Resource.spin)\n...\n&gt;&gt;&gt; outages[0]\nOutage(name='spin', start_at=datetime.datetime(2023, 5, 5, 13, 50, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), end_at=datetime.datetime(2023, 5, 5, 15, 30, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), description='System Degraded', notes='The Rancher 2 development cluster was unavailable from 13:50-14:10 due to a control plane node RAM shortage combined with reaching a ceiling on total cluster pod count. Staff increased RAM and unanimously agreed to raise the pod count ceiling; workloads will be briefly unavailable (1-2 min) for rolling node reboots.', status='Completed', swo='degr', update_at=None)\n</code></pre>"},{"location":"quickstart/#setting-up-credentials","title":"Setting up credentials","text":"<p>To get more detailed information from NERSC systems like your projects allocations or the current jobs in the queue you will need to provide credentials.  The NERSC Documentation has more information about getting the <code>client_id</code> and <code>client_secret</code> from iris. Once you retrieve the keys there are a few ways to use them to activate the client.</p>"},{"location":"quickstart/#storing-as-environment-variables","title":"Storing as environment variables","text":"<p>The simplest way to get started is to export them into your environment, and then retrieve them in your python script from the <code>os</code> module.</p> <pre><code>export SFAPI_CLIENT_ID='randmstrgz'\nexport SFAPI_SECRET='{\"kty\": \"RSA\", \"n\": ...}'\n</code></pre> asyncsync <pre><code>&gt;&gt;&gt; from sfapi_client import AsyncClient\n&gt;&gt;&gt; from sfapi_client.compute import Machine\n&gt;&gt;&gt; from authlib.jose import JsonWebKey\n&gt;&gt;&gt; import json\n&gt;&gt;&gt; import os\n&gt;&gt;&gt;\n&gt;&gt;&gt; client_id = os.getenv(\"SFAPI_CLIENT_ID\")\n&gt;&gt;&gt; sfapi_secret = os.getenv(\"SFAPI_SECRET\")\n&gt;&gt;&gt; client_secret = JsonWebKey.import_key(json.loads(sfapi_secret))\n&gt;&gt;&gt;\n&gt;&gt;&gt; async with AsyncClient(client_id, client_secret) as client:\n...     perlmutter = await client.compute(Machine.perlmutter)\n</code></pre> <pre><code>&gt;&gt;&gt; from sfapi_client import Client\n&gt;&gt;&gt; from sfapi_client.compute import Machine\n&gt;&gt;&gt; from authlib.jose import JsonWebKey\n&gt;&gt;&gt; import json\n&gt;&gt;&gt; import os\n&gt;&gt;&gt;\n&gt;&gt;&gt; client_id = os.getenv(\"SFAPI_CLIENT_ID\")\n&gt;&gt;&gt; sfapi_secret = os.getenv(\"SFAPI_SECRET\")\n&gt;&gt;&gt; client_secret = JsonWebKey.import_key(json.loads(sfapi_secret))\n&gt;&gt;&gt;\n&gt;&gt;&gt; with Client(client_id, client_secret) as client:\n...     perlmutter = client.compute(Machine.perlmutter)\n</code></pre>"},{"location":"quickstart/#storing-keys-in-files","title":"Storing keys in files","text":"<p>Keys can also be stored in a file. By default the client will look for files saved to the <code>~/.superfacility</code> directory in the pem format with the <code>client_id</code> in the first line. Files should be saved as read/write only by the user with <code>chmod 600 ~/.superfacility/key.pem</code>.</p> <pre><code>randmstrgz\n-----BEGIN RSA PRIVATE KEY-----\n...\n-----END RSA PRIVATE KEY-----\n</code></pre> <p>If the key is stored in a different location, possibly as a secret file storage in Spin, the <code>key_path</code> can be given explicitly to the client.</p> asyncsync <pre><code>&gt;&gt;&gt; from sfapi_client import AsyncClient\n&gt;&gt;&gt; from sfapi_client.compute import Machine\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt;\n&gt;&gt;&gt; key_path = Path(\"/path/to/secret/key.pem\")\n&gt;&gt;&gt;\n&gt;&gt;&gt; async with AsyncClient(key=key_path) as client:\n...     perlmutter = await client.compute(Machine.perlmutter)\n</code></pre> <pre><code>&gt;&gt;&gt; from sfapi_client import Client\n&gt;&gt;&gt; from sfapi_client.compute import Machine\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt;\n&gt;&gt;&gt; key_path = Path(\"/path/to/secret/key.pem\")\n&gt;&gt;&gt;\n&gt;&gt;&gt; with Client(key=key_path) as client:\n...     perlmutter = client.compute(Machine.perlmutter)\n</code></pre>"},{"location":"quickstart/#submitting-a-job","title":"Submitting a job","text":"asyncsync <pre><code>&gt;&gt;&gt; from sfapi_client import AsyncClient\n&gt;&gt;&gt; from sfapi_client.compute import Machine\n&gt;&gt;&gt;\n&gt;&gt;&gt; async with AsyncClient(client_id, client_secret) as client:\n...     perlmutter = await client.compute(Machine.perlmutter)\n...     job = await perlmutter.submit_job(job_path)\n...\n...     # Now wait for the job to complete\n...     await job.complete()\n</code></pre> <pre><code>&gt;&gt;&gt; from sfapi_client import Client\n&gt;&gt;&gt; from sfapi_client.compute import Machine\n&gt;&gt;&gt;\n&gt;&gt;&gt; with Client(client_id, client_secret) as client:\n...     perlmutter = client.compute(Machine.perlmutter)\n...     job = perlmutter.submit_job(job_path)\n...\n...     # Now wait for the job to complete\n...     job.complete()\n</code></pre>"},{"location":"quickstart/#monitoring-a-job","title":"Monitoring a job","text":"asyncsync <pre><code>&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; from sfapi_client import AsyncClient\n&gt;&gt;&gt; from sfapi_client.compute import Machine\n&gt;&gt;&gt;\n&gt;&gt;&gt; async with AsyncClient(client_id, client_secret) as client:\n...     perlmutter = await client.compute(Machine.perlmutter)\n...     job = await perlmutter.submit_job(job_path)\n...\n...     while True:\n...         # Update the job state\n...         await job.update()\n...         print(job.state)\n...         await asyncio.sleep(10)\n...\nJobState.PENDING\nJobState.PENDING\nJobState.RUNNING\n</code></pre> <pre><code>&gt;&gt;&gt; import time\n&gt;&gt;&gt; from sfapi_client import Client\n&gt;&gt;&gt; from sfapi_client.compute import Machine\n&gt;&gt;&gt;\n&gt;&gt;&gt; with Client(client_id, client_secret) as client:\n...     perlmutter = client.compute(Machine.perlmutter)\n...     job = perlmutter.submit_job(job_path)\n...\n...     while True:\n...         # Update the job state\n...         job.update()\n...         print(job.state)\n...         time.sleep(10)\n...\nJobState.PENDING\nJobState.PENDING\nJobState.RUNNING\n</code></pre>"},{"location":"quickstart/#canceling-a-job","title":"Canceling a job","text":"asyncsync <pre><code>&gt;&gt;&gt; from sfapi_client import AsyncClient\n&gt;&gt;&gt; from sfapi_client.compute import Machine\n&gt;&gt;&gt;\n&gt;&gt;&gt; async with AsyncClient(client_id, client_secret) as client:\n...     perlmutter = await client.compute(Machine.perlmutter)\n...     job = await perlmutter.submit_job(job_path)\n...\n...     await job.cancel()\n</code></pre> <pre><code>&gt;&gt;&gt; from sfapi_client import Client\n&gt;&gt;&gt; from sfapi_client.compute import Machine\n&gt;&gt;&gt;\n&gt;&gt;&gt; with Client(client_id, client_secret) as client:\n...     perlmutter = client.compute(Machine.perlmutter)\n...     job = perlmutter.submit_job(job_path)\n...\n...     job.cancel()\n</code></pre>"},{"location":"quickstart/#download-a-file","title":"Download a file","text":"asyncsync <pre><code>&gt;&gt;&gt; from sfapi_client import AsyncClient\n&gt;&gt;&gt; from sfapi_client.compute import Machine\n&gt;&gt;&gt;\n&gt;&gt;&gt; async with AsyncClient(client_id, key) as client:\n...     perlmutter = await client.compute(Machine.perlmutter)\n...     [file] = await perlmutter.ls(path)\n...     await file.download()\n...\n&lt;_io.StringIO object at 0x107f45120&gt;\n</code></pre> <pre><code>&gt;&gt;&gt; from sfapi_client import Client\n&gt;&gt;&gt; from sfapi_client.compute import Machine\n&gt;&gt;&gt;\n&gt;&gt;&gt; with Client(client_id, key) as client:\n...     perlmutter = client.compute(Machine.perlmutter)\n...     [file] = perlmutter.ls(path)\n...     file.download()\n...\n&lt;_io.StringIO object at 0x102aa5000&gt;\n</code></pre>"},{"location":"quickstart/#upload-a-file","title":"Upload a file","text":"asyncsync <pre><code>&gt;&gt;&gt; from sfapi_client import AsyncClient\n&gt;&gt;&gt; from sfapi_client.compute import Machine\n&gt;&gt;&gt;\n&gt;&gt;&gt; async with AsyncClient(client_id, key) as client:\n...     perlmutter = await client.compute(Machine.perlmutter)\n...     [path] = await perlmutter.ls(target, directory=True)\n...     await path.upload(file)\n...\nAsyncRemotePath(perms=None, hardlinks=0, user=None, group=None, size=0, date=None, name='hello.txt', compute=AsyncCompute(name='perlmutter', full_name='perlmutter', description='System is active', system_type='compute', notes=[], status=&lt;StatusValue.active: 'active'&gt;, updated_at=datetime.datetime(2023, 5, 9, 22, 5, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), client=&lt;sfapi_client._async.client.AsyncClient object at 0x107f85840&gt;))\n</code></pre> <pre><code>&gt;&gt;&gt; from sfapi_client import Client\n&gt;&gt;&gt; from sfapi_client.compute import Machine\n&gt;&gt;&gt;\n&gt;&gt;&gt; with Client(client_id, key) as client:\n...     perlmutter = client.compute(Machine.perlmutter)\n...     [path] = perlmutter.ls(target, directory=True)\n...     path.upload(file)\n...\nRemotePath(perms=None, hardlinks=0, user=None, group=None, size=0, date=None, name='hello.txt', compute=Compute(name='perlmutter', full_name='perlmutter', description='System is active', system_type='compute', notes=[], status=&lt;StatusValue.active: 'active'&gt;, updated_at=datetime.datetime(2023, 5, 9, 22, 5, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), client=&lt;sfapi_client._sync.client.Client object at 0x107f84e20&gt;))\n</code></pre>"},{"location":"reference/async/client/","title":"client","text":""},{"location":"reference/async/client/#asyncclient","title":"<code>AsyncClient</code>","text":"<p>Create a client instance.</p> <p>Usage:</p> <pre><code>&gt;&gt;&gt; from sfapi_client import AsyncClient\n&gt;&gt;&gt; async with AsyncClient(client_id, client_secret) as client:\n&gt;&gt;&gt;    # Use client\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>Optional[str]</code> <p>The client ID</p> <code>None</code> <code>secret</code> <code>Optional[str]</code> <p>The client secret</p> <code>None</code> <code>key</code> <code>Optional[Union[str, Path]]</code> <p>Full path to the client secret file, or path relative to <code>~</code> from the expanduser</p> <code>None</code> <code>api_base_url</code> <code>Optional[str]</code> <p>The API base URL</p> <code>SFAPI_BASE_URL</code> <code>token_url</code> <code>Optional[str]</code> <p>The token URL</p> <code>SFAPI_TOKEN_URL</code> <code>access_token</code> <code>Optional[str]</code> <p>An existing access token</p> <code>None</code> <p>Returns:</p> Type Description <code>AsyncClient</code> <p>The client instance</p> Source code in <code>sfapi_client/_async/client.py</code> <pre><code>def __init__(\n    self,\n    client_id: Optional[str] = None,\n    secret: Optional[str] = None,\n    key: Optional[Union[str, Path]] = None,\n    api_base_url: Optional[str] = SFAPI_BASE_URL,\n    token_url: Optional[str] = SFAPI_TOKEN_URL,\n    access_token: Optional[str] = None,\n    wait_interval: int = 10,\n):\n    \"\"\"\n    Create a client instance.\n\n    Usage:\n\n    ```python\n    &gt;&gt;&gt; from sfapi_client import AsyncClient\n    &gt;&gt;&gt; async with AsyncClient(client_id, client_secret) as client:\n    &gt;&gt;&gt;    # Use client\n    ```\n\n    :param client_id: The client ID\n    :param secret: The client secret\n    :param key: Full path to the client secret file, or path relative to `~` from the expanduser\n    :param api_base_url: The API base URL\n    :param token_url: The token URL\n    :param access_token: An existing access token\n\n    :return: The client instance\n    :rtype: AsyncClient\n    \"\"\"\n    self._client_id = None\n    self._secret = None\n    if any(arg is None for arg in [client_id, secret]):\n        self._read_client_secret_from_file(key)\n    else:\n        self._client_id = client_id\n        self._secret = secret\n    self._api_base_url = api_base_url\n    self._token_url = token_url\n    self._client_user = None\n    self.__http_client = None\n    self._api = None\n    self._resources = None\n    self._wait_interval = wait_interval\n    self._access_token = access_token\n</code></pre>"},{"location":"reference/async/client/#sfapi_client.AsyncClient.api","title":"<code>api</code>  <code>property</code>","text":"<p>API related information.</p>"},{"location":"reference/async/client/#sfapi_client.AsyncClient.resources","title":"<code>resources</code>  <code>property</code>","text":"<p>Resource related information.</p>"},{"location":"reference/async/client/#sfapi_client.AsyncClient.token","title":"<code>token</code>  <code>async</code> <code>property</code>","text":"<p>Bearer token string which can be helpful for debugging through swagger UI.</p>"},{"location":"reference/async/client/#sfapi_client.AsyncClient.close","title":"<code>close()</code>  <code>async</code>","text":"<p>Release resources associated with the client instance.</p> Source code in <code>sfapi_client/_async/client.py</code> <pre><code>async def close(self):\n    \"\"\"\n    Release resources associated with the client instance.\n    \"\"\"\n    if self.__http_client is not None:\n        await self.__http_client.aclose()\n</code></pre>"},{"location":"reference/async/client/#sfapi_client.AsyncClient.compute","title":"<code>compute(machine)</code>  <code>async</code>","text":"<p>Create a compute site to submit jobs or view jobs in the queue</p> <p>Parameters:</p> Name Type Description Default <code>machine</code> <code>Union[Machine, str]</code> <p>Name of the compute machine to use</p> required <p>Returns:</p> Type Description <code>AsyncCompute</code> <p>Compute object that can be used to start jobs, view the queue on the system, or list files and directories.</p> Source code in <code>sfapi_client/_async/client.py</code> <pre><code>async def compute(self, machine: Union[Machine, str]) -&gt; AsyncCompute:\n    \"\"\"Create a compute site to submit jobs or view jobs in the queue\n\n    :param machine: Name of the compute machine to use\n    :return: Compute object that can be used to start jobs,\n    view the queue on the system, or list files and directories.\n    \"\"\"\n    # Allows for creating a compute from a name string\n    machine = Machine(machine)\n    response = await self.get(f\"status/{machine.value}\")\n\n    values = response.json()\n    values[\"client\"] = self\n    compute = AsyncCompute.model_validate(values)\n\n    return compute\n</code></pre>"},{"location":"reference/async/client/#sfapi_client.AsyncClient.group","title":"<code>group(name)</code>  <code>async</code>","text":"<p>Get a group.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The group name</p> required <p>Returns:</p> Type Description <code>AsyncGroup</code> <p>The group</p> Source code in <code>sfapi_client/_async/client.py</code> <pre><code>async def group(self, name: str) -&gt; AsyncGroup:\n    \"\"\"\n    Get a group.\n\n    :param name: The group name\n    :return: The group\n    :rtype: AsyncGroup\n    \"\"\"\n    return await AsyncGroup._fetch_group(self, name)\n</code></pre>"},{"location":"reference/async/client/#sfapi_client.AsyncClient.user","title":"<code>user(username=None)</code>  <code>async</code>","text":"<p>Get a user.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>Optional[str]</code> <p>The username</p> <code>None</code> <p>Returns:</p> Type Description <code>UserGroup</code> <p>The user</p> Source code in <code>sfapi_client/_async/client.py</code> <pre><code>async def user(self, username: Optional[str] = None) -&gt; AsyncUser:\n    \"\"\"\n    Get a user.\n\n    :param username: The username\n    :return: The user\n    :rtype: UserGroup\n    \"\"\"\n    return await AsyncUser._fetch_user(self, username)\n</code></pre>"},{"location":"reference/async/compute/","title":"compute","text":""},{"location":"reference/async/compute/#asynccompute","title":"<code>AsyncCompute</code>","text":"<p>A compute resource.</p> Source code in <code>sfapi_client/_async/compute.py</code> <pre><code>def __init__(self, **kwargs):\n    super().__init__(**kwargs)\n    self._monitor = AsyncJobMonitor(self)\n</code></pre>"},{"location":"reference/async/compute/#sfapi_client._models.AppRoutersStatusModelsStatus.description","title":"<code>description = Field(None, title='Description')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/compute/#sfapi_client._models.AppRoutersStatusModelsStatus.full_name","title":"<code>full_name = Field(None, title='Full Name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/compute/#sfapi_client._models.AppRoutersStatusModelsStatus.name","title":"<code>name = Field(..., title='Name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/compute/#sfapi_client._models.AppRoutersStatusModelsStatus.notes","title":"<code>notes = Field(None, title='Notes')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/compute/#sfapi_client._models.AppRoutersStatusModelsStatus.status","title":"<code>status</code>  <code>instance-attribute</code>","text":""},{"location":"reference/async/compute/#sfapi_client._models.AppRoutersStatusModelsStatus.system_type","title":"<code>system_type = Field(None, title='System Type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/compute/#sfapi_client._models.AppRoutersStatusModelsStatus.updated_at","title":"<code>updated_at = Field(None, title='Updated At')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/compute/#sfapi_client.compute.AsyncCompute.submit_job","title":"<code>submit_job(script)</code>  <code>async</code>","text":"<p>Parameters:</p> Name Type Description Default <code>script</code> <code>Union[str, AsyncRemotePath]</code> <p>Path to file on the compute system, or script to run beginning with <code>#!</code>.</p> required <p>Returns:</p> Type Description <code>AsyncJobSqueue</code> <p>Object containing information about the job, its job id, and status on the system.</p> Source code in <code>sfapi_client/_async/compute.py</code> <pre><code>@check_auth\nasync def submit_job(self, script: Union[str, AsyncRemotePath]) -&gt; AsyncJobSqueue:\n    \"\"\"Submit a job to the compute resource\n\n    :param script: Path to file on the compute system, or script to run beginning with `#!`.\n    :return: Object containing information about the job, its job id, and status on the system.\n    \"\"\"\n\n    is_path: bool = True\n\n    # If it's a remote path we've already checked so just continue\n    if isinstance(script, AsyncRemotePath):\n        pass\n    # If the string input looks like a script we'll set is_path to false\n    elif script.startswith(\"#!\") and \"\\n\" in script:\n        # If it starts with shebang and has multiple lines\n        is_path = False\n    else:\n        # If we're given a path make sure it exists\n        script_path = await self.ls(script)\n        is_file = await script_path[0].is_file()\n        if len(script_path) != 1 or not is_file:\n            raise SfApiError(f\"Script path not present or is not a file, {script}\")\n\n    data = {\"job\": script, \"isPath\": is_path}\n\n    r = await self.client.post(f\"compute/jobs/{self.name}\", data)\n    r.raise_for_status()\n\n    json_response = r.json()\n    job_response = SubmitJobResponse.model_validate(json_response)\n\n    if job_response.status == SubmitJobResponseStatus.ERROR:\n        raise SfApiError(job_response.error)\n\n    task_id = job_response.task_id\n\n    # We now need waiting for the task to complete!\n    task_result = await self._wait_for_task(task_id)\n    result = json.loads(task_result)\n    if result.get(\"status\") == \"error\":\n        raise SfApiError(result[\"error\"])\n\n    jobid = result.get(\"jobid\")\n    if jobid is None:\n        raise SfApiError(f\"Unable to extract jobid if for task: {task_id}\")\n\n    job = AsyncJobSqueue(jobid=jobid, compute=self)\n\n    return job\n</code></pre>"},{"location":"reference/async/compute/#machine","title":"<code>Machine</code>","text":"<p>The possible compute resources.</p> <p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/async/compute/#sfapi_client.compute.Machine.dtn01","title":"<code>dtn01 = 'dtn01'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/compute/#sfapi_client.compute.Machine.dtns","title":"<code>dtns = 'dtns'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/compute/#sfapi_client.compute.Machine.perlmutter","title":"<code>perlmutter = 'perlmutter'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/exceptions/","title":"exceptions","text":""},{"location":"reference/async/exceptions/#sfapierror","title":"<code>SfApiError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception indicating an error occurred call the SF API.</p> Source code in <code>sfapi_client/exceptions.py</code> <pre><code>def __init__(self, message):\n    self.message = message\n</code></pre>"},{"location":"reference/async/groups/","title":"groups","text":""},{"location":"reference/async/groups/#asyncgroup","title":"<code>AsyncGroup</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A user group.</p>"},{"location":"reference/async/groups/#sfapi_client.groups.AsyncGroup.gid","title":"<code>gid</code>  <code>instance-attribute</code>","text":""},{"location":"reference/async/groups/#sfapi_client.groups.AsyncGroup.members","title":"<code>members</code>  <code>property</code>","text":"<p>The users in this group.</p>"},{"location":"reference/async/groups/#sfapi_client.groups.AsyncGroup.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/groups/#sfapi_client.groups.AsyncGroup.name","title":"<code>name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/async/groups/#sfapi_client.groups.AsyncGroup.add","title":"<code>add(users)</code>  <code>async</code>","text":"<p>Add users to the group.</p> <p>Parameters:</p> Name Type Description Default <code>users</code> <code>Union[List[str], List[AsyncUser]]</code> <p>The usernames to add</p> required Source code in <code>sfapi_client/_async/groups.py</code> <pre><code>async def add(self, users: Union[List[str], List[\"AsyncUser\"]]):\n    \"\"\"\n    Add users to the group.\n\n    :param users: The usernames to add\n    \"\"\"\n    await self._group_action(users, GroupAction.batch_add)\n</code></pre>"},{"location":"reference/async/groups/#sfapi_client.groups.AsyncGroup.remove","title":"<code>remove(users)</code>  <code>async</code>","text":"<p>Remove users from the group.</p> <p>Parameters:</p> Name Type Description Default <code>users</code> <code>Union[List[str], List[AsyncUser]]</code> <p>The usernames to remove</p> required Source code in <code>sfapi_client/_async/groups.py</code> <pre><code>async def remove(self, users: Union[List[str], List[\"AsyncUser\"]]):\n    \"\"\"\n    Remove users from the group.\n\n    :param users: The usernames to remove\n    \"\"\"\n    await self._group_action(users, GroupAction.batch_remove)\n</code></pre>"},{"location":"reference/async/groups/#sfapi_client.groups.AsyncGroup.update","title":"<code>update()</code>  <code>async</code>","text":"<p>Update the state of the group by fetching the state from the server.</p> Source code in <code>sfapi_client/_async/groups.py</code> <pre><code>async def update(self):\n    \"\"\"\n    Update the state of the group by fetching the state from the server.\n    \"\"\"\n    group_state = await self._fetch_group(self.client, self.name)\n    self._update(group_state)\n</code></pre>"},{"location":"reference/async/groups/#asyncgroupmember","title":"<code>AsyncGroupMember</code>","text":"<p>A group member.</p>"},{"location":"reference/async/groups/#sfapi_client._models.UserStats.name","title":"<code>name = Field(..., title='Name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/groups/#sfapi_client._models.UserStats.uid","title":"<code>uid = Field(..., title='Uid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/groups/#sfapi_client.groups.AsyncGroupMember.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/groups/#sfapi_client.groups.AsyncGroupMember.user","title":"<code>user()</code>  <code>async</code>","text":"<p>Get the user associated with the membership.</p> Source code in <code>sfapi_client/_async/groups.py</code> <pre><code>async def user(self) -&gt; \"AsyncUser\":\n    \"\"\"\n    Get the user associated with the membership.\n    \"\"\"\n    return await AsyncUser._fetch_user(self.client, self.name)\n</code></pre>"},{"location":"reference/async/jobs/","title":"jobs","text":""},{"location":"reference/async/jobs/#jobstate","title":"<code>JobState</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>JobStates</p>"},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.BOOT_FAIL","title":"<code>BOOT_FAIL = 'BOOT_FAIL'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.CANCELLED","title":"<code>CANCELLED = 'CANCELLED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.COMPLETED","title":"<code>COMPLETED = 'COMPLETED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.COMPLETING","title":"<code>COMPLETING = 'COMPLETING'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.CONFIGURING","title":"<code>CONFIGURING = 'CONFIGURING'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.DEADLINE","title":"<code>DEADLINE = 'DEADLINE'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.FAILED","title":"<code>FAILED = 'FAILED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.NODE_FAIL","title":"<code>NODE_FAIL = 'NODE_FAIL'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.OUT_OF_MEMORY","title":"<code>OUT_OF_MEMORY = 'OUT_OF_MEMORY'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.PENDING","title":"<code>PENDING = 'PENDING'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.PREEMPTED","title":"<code>PREEMPTED = 'PREEMPTED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.REQUEUED","title":"<code>REQUEUED = 'REQUEUED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.REQUEUE_FED","title":"<code>REQUEUE_FED = 'REQUEUE_FED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.REQUEUE_HOLD","title":"<code>REQUEUE_HOLD = 'REQUEUE_HOLD'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.RESIZING","title":"<code>RESIZING = 'RESIZING'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.RESV_DEL_HOLD","title":"<code>RESV_DEL_HOLD = 'RESV_DEL_HOLD'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.REVOKED","title":"<code>REVOKED = 'REVOKED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.RUNNING","title":"<code>RUNNING = 'RUNNING'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.SIGNALING","title":"<code>SIGNALING = 'SIGNALING'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.SPECIAL_EXIT","title":"<code>SPECIAL_EXIT = 'SPECIAL_EXIT'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.STAGE_OUT","title":"<code>STAGE_OUT = 'STAGE_OUT'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.STOPPED","title":"<code>STOPPED = 'STOPPED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.SUSPENDED","title":"<code>SUSPENDED = 'SUSPENDED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.JobState.TIMEOUT","title":"<code>TIMEOUT = 'TIMEOUT'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#asyncjob","title":"<code>AsyncJob</code>","text":"<p>               Bases: <code>BaseModel</code>, <code>ABC</code></p> <p>Models a job submitted to run on a compute resource.</p>"},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJob.compute","title":"<code>compute = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJob.jobid","title":"<code>jobid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJob.state","title":"<code>state = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJob.cancel","title":"<code>cancel(wait=False)</code>  <code>async</code>","text":"<p>Cancel a running job</p> <p>Parameters:</p> Name Type Description Default <code>wait</code> <code>bool</code> <p>True, to wait for job be to cancel, otherwise returns when cancellation has been submitted.</p> <code>False</code> Source code in <code>sfapi_client/_async/jobs.py</code> <pre><code>async def cancel(self, wait=False):\n    \"\"\"\n    Cancel a running job\n\n    :param wait: True, to wait for job be to cancel, otherwise returns when\n    cancellation\n    has been submitted.\n    :type wait: bool\n\n\n    \"\"\"\n    # We have wait for a jobid before we can cancel\n    while self.jobid is None:\n        await _ASYNC_SLEEP()\n\n    await self.compute.client.delete(\n        f\"compute/jobs/{self.compute.name}/{self.jobid}\"\n    )\n\n    if wait:\n        while self.state != JobState.CANCELLED:\n            await self.update()\n            await _ASYNC_SLEEP(self.compute.client._wait_interval)\n</code></pre>"},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJob.complete","title":"<code>complete(timeout=sys.maxsize)</code>  <code>async</code>","text":"<p>Wait for a job to move into a terminal state.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>The maximum time to wait in seconds, the actually wait time will be in 10 second increments.</p> <code>maxsize</code> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>if timeout is reached</p> Source code in <code>sfapi_client/_async/jobs.py</code> <pre><code>async def complete(self, timeout: int = sys.maxsize):\n    \"\"\"\n    Wait for a job to move into a terminal state.\n\n    :param timeout: The maximum time to wait in seconds, the actually\n    wait time will be in 10 second increments.\n    :raises TimeoutError: if timeout is reached\n    \"\"\"\n    return await self._wait_until_complete(timeout)\n</code></pre>"},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJob.dict","title":"<code>dict(*args, **kwargs)</code>","text":"Source code in <code>sfapi_client/_async/jobs.py</code> <pre><code>def dict(self, *args, **kwargs) -&gt; Dict:\n    if \"exclude\" not in kwargs:\n        kwargs[\"exclude\"] = {\"compute\"}\n    return super().dict(*args, **kwargs)\n</code></pre>"},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJob.running","title":"<code>running(timeout=sys.maxsize)</code>  <code>async</code>","text":"<p>Wait for a job to move into running state.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>The maximum time to wait in seconds, the actually wait time will be in 10 second increments.</p> <code>maxsize</code> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>if timeout if reached</p> Source code in <code>sfapi_client/_async/jobs.py</code> <pre><code>async def running(self, timeout: int = sys.maxsize):\n    \"\"\"\n    Wait for a job to move into running state.\n\n    :param timeout: The maximum time to wait in seconds, the actually wait\n    time will be in 10 second increments.\n    :raises TimeoutError: if timeout if reached\n    \"\"\"\n    state = await self._wait_until([JobState.RUNNING] + TERMINAL_STATES, timeout)\n    if state != JobState.RUNNING:\n        raise SfApiError(\n            f\"Job never entered the running state, end state was: {state}\"\n        )\n\n    return state\n</code></pre>"},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJob.state_validate","title":"<code>state_validate(v)</code>","text":"Source code in <code>sfapi_client/_async/jobs.py</code> <pre><code>@field_validator(\"state\", mode=\"before\", check_fields=False)\ndef state_validate(cls, v):\n    # sacct return a state of the form \"CANCELLED by XXXX\" for the\n    # cancelled state, coerce into value that will match a state\n    # modeled by the enum\n    if v.startswith(\"CANCELLED by\"):\n        return \"CANCELLED\"\n\n    return v\n</code></pre>"},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJob.update","title":"<code>update()</code>  <code>async</code>","text":"<p>Update the state of the job by fetching the state from the compute resource.</p> Source code in <code>sfapi_client/_async/jobs.py</code> <pre><code>async def update(self):\n    \"\"\"\n    Update the state of the job by fetching the state from the compute resource.\n    \"\"\"\n    job_state = await self._fetch_state()\n    self._update(job_state)\n</code></pre>"},{"location":"reference/async/jobs/#asyncjobsacct","title":"<code>AsyncJobSacct</code>","text":"<p>Models a job running on a compute resource, the information is fetched using <code>sacct</code>.</p>"},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.account","title":"<code>account = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.array_job_id","title":"<code>array_job_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.array_task_id","title":"<code>array_task_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.command","title":"<code>command = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.comment","title":"<code>comment = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.contiguous","title":"<code>contiguous = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.core_spec","title":"<code>core_spec = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.cores_per_socket","title":"<code>cores_per_socket = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.cpus","title":"<code>cpus = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.dependency","title":"<code>dependency = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.end_time","title":"<code>end_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.exc_nodes","title":"<code>exc_nodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.exec_host","title":"<code>exec_host = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.features","title":"<code>features = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.field_","title":"<code>field_ = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.group","title":"<code>group = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.jobid","title":"<code>jobid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.licenses","title":"<code>licenses = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.min_cpus","title":"<code>min_cpus = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.min_memory","title":"<code>min_memory = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.min_tmp_disk","title":"<code>min_tmp_disk = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.name","title":"<code>name = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.nice","title":"<code>nice = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.nodelist","title":"<code>nodelist = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.nodelist_reason_","title":"<code>nodelist_reason_ = Field(None, alias='nodelist(reason)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.nodes","title":"<code>nodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.over_subscribe","title":"<code>over_subscribe = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.partition","title":"<code>partition = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.priority","title":"<code>priority = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.qos","title":"<code>qos = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.reason","title":"<code>reason = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.req_nodes","title":"<code>req_nodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.reservation","title":"<code>reservation = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.s_c_t","title":"<code>s_c_t = Field(None, alias='s:c:t')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.schednodes","title":"<code>schednodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.sockets_per_node","title":"<code>sockets_per_node = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.st","title":"<code>st = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.start_time","title":"<code>start_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.state","title":"<code>state = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.submit_time","title":"<code>submit_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.threads_per_core","title":"<code>threads_per_core = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.time","title":"<code>time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.time_left","title":"<code>time_left = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.time_limit","title":"<code>time_limit = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.tres_per_node","title":"<code>tres_per_node = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.uid","title":"<code>uid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.user","title":"<code>user = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.wckey","title":"<code>wckey = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.work_dir","title":"<code>work_dir = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#asyncjobsqueue","title":"<code>AsyncJobSqueue</code>","text":"<p>Models a job running on a compute resource, the information is fetched using <code>squeue</code>.</p> <p>Models a job running on a compute resource, the information is fetched using <code>squeue</code>.</p>"},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.account","title":"<code>account = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.admincomment","title":"<code>admincomment = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.alloccpus","title":"<code>alloccpus = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.allocnodes","title":"<code>allocnodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.alloctres","title":"<code>alloctres = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.associd","title":"<code>associd = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.avecpu","title":"<code>avecpu = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.avecpufreq","title":"<code>avecpufreq = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.avediskread","title":"<code>avediskread = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.avediskwrite","title":"<code>avediskwrite = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.avepages","title":"<code>avepages = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.averss","title":"<code>averss = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.avevmsize","title":"<code>avevmsize = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.blockid","title":"<code>blockid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.cluster","title":"<code>cluster = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.comment","title":"<code>comment = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.constraints","title":"<code>constraints = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.consumedenergy","title":"<code>consumedenergy = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.consumedenergyraw","title":"<code>consumedenergyraw = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.cputime","title":"<code>cputime = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.cputimeraw","title":"<code>cputimeraw = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.dbindex","title":"<code>dbindex = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.derivedexitcode","title":"<code>derivedexitcode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.elapsed","title":"<code>elapsed = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.elapsedraw","title":"<code>elapsedraw = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.eligible","title":"<code>eligible = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.end","title":"<code>end = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.exitcode","title":"<code>exitcode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.flags","title":"<code>flags = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.gid","title":"<code>gid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.group","title":"<code>group = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.jobid","title":"<code>jobid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.jobidraw","title":"<code>jobidraw = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.jobname","title":"<code>jobname = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.layout","title":"<code>layout = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxdiskread","title":"<code>maxdiskread = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxdiskreadnode","title":"<code>maxdiskreadnode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxdiskreadtask","title":"<code>maxdiskreadtask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxdiskwrite","title":"<code>maxdiskwrite = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxdiskwritenode","title":"<code>maxdiskwritenode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxdiskwritetask","title":"<code>maxdiskwritetask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxpages","title":"<code>maxpages = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxpagesnode","title":"<code>maxpagesnode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxpagestask","title":"<code>maxpagestask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxrss","title":"<code>maxrss = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxrssnode","title":"<code>maxrssnode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxrsstask","title":"<code>maxrsstask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxvmsize","title":"<code>maxvmsize = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxvmsizenode","title":"<code>maxvmsizenode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxvmsizetask","title":"<code>maxvmsizetask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.mcslabel","title":"<code>mcslabel = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.mincpu","title":"<code>mincpu = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.mincpunode","title":"<code>mincpunode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.mincputask","title":"<code>mincputask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.ncpus","title":"<code>ncpus = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.nnodes","title":"<code>nnodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.nodelist","title":"<code>nodelist = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.ntasks","title":"<code>ntasks = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.partition","title":"<code>partition = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.priority","title":"<code>priority = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.qos","title":"<code>qos = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.qosraw","title":"<code>qosraw = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reason","title":"<code>reason = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reqcpufreq","title":"<code>reqcpufreq = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reqcpufreqgov","title":"<code>reqcpufreqgov = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reqcpufreqmax","title":"<code>reqcpufreqmax = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reqcpufreqmin","title":"<code>reqcpufreqmin = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reqcpus","title":"<code>reqcpus = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reqmem","title":"<code>reqmem = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reqnodes","title":"<code>reqnodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reqtres","title":"<code>reqtres = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reservation","title":"<code>reservation = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reservationid","title":"<code>reservationid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reserved","title":"<code>reserved = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.resvcpu","title":"<code>resvcpu = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.resvcpuraw","title":"<code>resvcpuraw = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.start","title":"<code>start = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.state","title":"<code>state = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.submit","title":"<code>submit = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.suspended","title":"<code>suspended = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.systemcomment","title":"<code>systemcomment = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.systemcpu","title":"<code>systemcpu = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.timelimit","title":"<code>timelimit = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.timelimitraw","title":"<code>timelimitraw = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.totalcpu","title":"<code>totalcpu = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageinave","title":"<code>tresusageinave = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageinmax","title":"<code>tresusageinmax = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageinmaxnode","title":"<code>tresusageinmaxnode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageinmaxtask","title":"<code>tresusageinmaxtask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageinmin","title":"<code>tresusageinmin = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageinminnode","title":"<code>tresusageinminnode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageinmintask","title":"<code>tresusageinmintask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageintot","title":"<code>tresusageintot = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageoutave","title":"<code>tresusageoutave = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageoutmax","title":"<code>tresusageoutmax = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageoutmaxnode","title":"<code>tresusageoutmaxnode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageoutmaxtask","title":"<code>tresusageoutmaxtask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageoutmin","title":"<code>tresusageoutmin = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageoutminnode","title":"<code>tresusageoutminnode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageoutmintask","title":"<code>tresusageoutmintask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageouttot","title":"<code>tresusageouttot = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.uid","title":"<code>uid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.user","title":"<code>user = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.usercpu","title":"<code>usercpu = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.wckey","title":"<code>wckey = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.wckeyid","title":"<code>wckeyid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.workdir","title":"<code>workdir = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.account","title":"<code>account = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.array_job_id","title":"<code>array_job_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.array_task_id","title":"<code>array_task_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.command","title":"<code>command = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.comment","title":"<code>comment = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.compute","title":"<code>compute = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.contiguous","title":"<code>contiguous = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.core_spec","title":"<code>core_spec = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.cores_per_socket","title":"<code>cores_per_socket = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.cpus","title":"<code>cpus = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.dependency","title":"<code>dependency = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.end_time","title":"<code>end_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.exc_nodes","title":"<code>exc_nodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.exec_host","title":"<code>exec_host = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.features","title":"<code>features = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.field_","title":"<code>field_ = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.group","title":"<code>group = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.jobid","title":"<code>jobid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.licenses","title":"<code>licenses = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.min_cpus","title":"<code>min_cpus = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.min_memory","title":"<code>min_memory = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.min_tmp_disk","title":"<code>min_tmp_disk = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.name","title":"<code>name = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.nice","title":"<code>nice = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.nodelist","title":"<code>nodelist = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.nodelist_reason_","title":"<code>nodelist_reason_ = Field(None, alias='nodelist(reason)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.nodes","title":"<code>nodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.over_subscribe","title":"<code>over_subscribe = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.partition","title":"<code>partition = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.priority","title":"<code>priority = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.qos","title":"<code>qos = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.reason","title":"<code>reason = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.req_nodes","title":"<code>req_nodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.reservation","title":"<code>reservation = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.s_c_t","title":"<code>s_c_t = Field(None, alias='s:c:t')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.schednodes","title":"<code>schednodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.sockets_per_node","title":"<code>sockets_per_node = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.st","title":"<code>st = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.start_time","title":"<code>start_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.state","title":"<code>state = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.submit_time","title":"<code>submit_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.threads_per_core","title":"<code>threads_per_core = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.time","title":"<code>time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.time_left","title":"<code>time_left = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.time_limit","title":"<code>time_limit = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.tres_per_node","title":"<code>tres_per_node = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.uid","title":"<code>uid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.user","title":"<code>user = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.wckey","title":"<code>wckey = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.work_dir","title":"<code>work_dir = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.cancel","title":"<code>cancel(wait=False)</code>  <code>async</code>","text":"<p>Cancel a running job</p> <p>Parameters:</p> Name Type Description Default <code>wait</code> <code>bool</code> <p>True, to wait for job be to cancel, otherwise returns when cancellation has been submitted.</p> <code>False</code> Source code in <code>sfapi_client/_async/jobs.py</code> <pre><code>async def cancel(self, wait=False):\n    \"\"\"\n    Cancel a running job\n\n    :param wait: True, to wait for job be to cancel, otherwise returns when\n    cancellation\n    has been submitted.\n    :type wait: bool\n\n\n    \"\"\"\n    # We have wait for a jobid before we can cancel\n    while self.jobid is None:\n        await _ASYNC_SLEEP()\n\n    await self.compute.client.delete(\n        f\"compute/jobs/{self.compute.name}/{self.jobid}\"\n    )\n\n    if wait:\n        while self.state != JobState.CANCELLED:\n            await self.update()\n            await _ASYNC_SLEEP(self.compute.client._wait_interval)\n</code></pre>"},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.complete","title":"<code>complete(timeout=sys.maxsize)</code>  <code>async</code>","text":"<p>Wait for a job to move into a terminal state.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>The maximum time to wait in seconds, the actually wait time will be in 10 second increments.</p> <code>maxsize</code> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>if timeout is reached</p> Source code in <code>sfapi_client/_async/jobs.py</code> <pre><code>async def complete(self, timeout: int = sys.maxsize):\n    \"\"\"\n    Wait for a job to move into a terminal state.\n\n    :param timeout: The maximum time to wait in seconds, the actually\n    wait time will be in 10 second increments.\n    :raises TimeoutError: if timeout is reached\n    \"\"\"\n    return await self._wait_until_complete(timeout)\n</code></pre>"},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.dict","title":"<code>dict(*args, **kwargs)</code>","text":"Source code in <code>sfapi_client/_async/jobs.py</code> <pre><code>def dict(self, *args, **kwargs) -&gt; Dict:\n    if \"exclude\" not in kwargs:\n        kwargs[\"exclude\"] = {\"compute\"}\n    return super().dict(*args, **kwargs)\n</code></pre>"},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.running","title":"<code>running(timeout=sys.maxsize)</code>  <code>async</code>","text":"<p>Wait for a job to move into running state.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>The maximum time to wait in seconds, the actually wait time will be in 10 second increments.</p> <code>maxsize</code> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>if timeout if reached</p> Source code in <code>sfapi_client/_async/jobs.py</code> <pre><code>async def running(self, timeout: int = sys.maxsize):\n    \"\"\"\n    Wait for a job to move into running state.\n\n    :param timeout: The maximum time to wait in seconds, the actually wait\n    time will be in 10 second increments.\n    :raises TimeoutError: if timeout if reached\n    \"\"\"\n    state = await self._wait_until([JobState.RUNNING] + TERMINAL_STATES, timeout)\n    if state != JobState.RUNNING:\n        raise SfApiError(\n            f\"Job never entered the running state, end state was: {state}\"\n        )\n\n    return state\n</code></pre>"},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.state_validate","title":"<code>state_validate(v)</code>","text":"Source code in <code>sfapi_client/_async/jobs.py</code> <pre><code>@field_validator(\"state\", mode=\"before\", check_fields=False)\ndef state_validate(cls, v):\n    # sacct return a state of the form \"CANCELLED by XXXX\" for the\n    # cancelled state, coerce into value that will match a state\n    # modeled by the enum\n    if v.startswith(\"CANCELLED by\"):\n        return \"CANCELLED\"\n\n    return v\n</code></pre>"},{"location":"reference/async/jobs/#sfapi_client.jobs.AsyncJobSqueue.update","title":"<code>update()</code>  <code>async</code>","text":"<p>Update the state of the job by fetching the state from the compute resource.</p> Source code in <code>sfapi_client/_async/jobs.py</code> <pre><code>async def update(self):\n    \"\"\"\n    Update the state of the job by fetching the state from the compute resource.\n    \"\"\"\n    job_state = await self._fetch_state()\n    self._update(job_state)\n</code></pre>"},{"location":"reference/async/paths/","title":"paths","text":""},{"location":"reference/async/paths/#asyncremotepath","title":"<code>AsyncRemotePath</code>","text":"<p>RemotePath is used to model a remote path, it takes inspiration from <code>pathlib</code> and shares some of its interface.</p> <p>RemotePath is used to model a remote path, it takes inspiration from pathlib and shares some of its interface.</p> Source code in <code>sfapi_client/_async/paths.py</code> <pre><code>def __init__(self, path=None, **kwargs):\n    super().__init__(**kwargs)\n    self._path = PurePosixPath(path)\n\n    if self.name is None:\n        self.name = self._path.name\n</code></pre>"},{"location":"reference/async/paths/#sfapi_client._models.DirectoryEntry.date","title":"<code>date = Field(None, title='Date')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/paths/#sfapi_client._models.DirectoryEntry.group","title":"<code>group = Field(None, title='Group')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/paths/#sfapi_client._models.DirectoryEntry.hardlinks","title":"<code>hardlinks = Field(0, title='Hardlinks')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/paths/#sfapi_client._models.DirectoryEntry.name","title":"<code>name = Field(None, title='Name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/paths/#sfapi_client._models.DirectoryEntry.perms","title":"<code>perms = Field(None, title='Perms')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/paths/#sfapi_client._models.DirectoryEntry.size","title":"<code>size = Field(0, title='Size')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/paths/#sfapi_client._models.DirectoryEntry.user","title":"<code>user = Field(None, title='User')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.compute","title":"<code>compute</code>  <code>instance-attribute</code>","text":""},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.date","title":"<code>date = Field(None, title='Date')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.group","title":"<code>group = Field(None, title='Group')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.hardlinks","title":"<code>hardlinks = Field(0, title='Hardlinks')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.name","title":"<code>name = self._path.name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.parent","title":"<code>parent</code>  <code>property</code>","text":"<p>The parent of the path.</p> <p>Returns:</p> Type Description <code>RemotePath</code> <p>the parent</p>"},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.parents","title":"<code>parents</code>  <code>property</code>","text":"<p>The parents of the path.</p> <p>Returns:</p> Type Description <code>List[RemotePath]</code> <p>the parents</p>"},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.parts","title":"<code>parts</code>  <code>property</code>","text":"<p>The paths components as a tuple.</p> <p>Returns:</p> Type Description <code>Tuple[str]</code> <p>the path components</p>"},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.perms","title":"<code>perms = Field(None, title='Perms')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.size","title":"<code>size = Field(0, title='Size')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.stem","title":"<code>stem</code>  <code>property</code>","text":"<p>The final path component, without its suffix.</p> <p>Returns:</p> Type Description <code>str</code> <p>the path stem</p>"},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.suffix","title":"<code>suffix</code>  <code>property</code>","text":"<p>The path extension.</p> <p>Returns:</p> Type Description <code>str</code> <p>the path extension</p>"},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.suffixes","title":"<code>suffixes</code>  <code>property</code>","text":"<p>A list of the path extensions.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>the path extensions</p>"},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.user","title":"<code>user = Field(None, title='User')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.dict","title":"<code>dict(*args, **kwargs)</code>","text":"Source code in <code>sfapi_client/_async/paths.py</code> <pre><code>def dict(self, *args, **kwargs) -&gt; Dict:\n    if \"exclude\" not in kwargs:\n        kwargs[\"exclude\"] = {\"compute\"}\n    return super().dict(*args, **kwargs)\n</code></pre>"},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.download","title":"<code>download(binary=False)</code>  <code>async</code>","text":"<p>Download the file contents.</p> <p>Parameters:</p> Name Type Description Default <code>binary</code> <p>indicate if the file should be treated as binary, defaults to False</p> <code>False</code> <p>Raises:</p> Type Description <code>IsADirectoryError</code> <p>if path points to a directory.</p> <code>SfApiError</code> Source code in <code>sfapi_client/_async/paths.py</code> <pre><code>async def download(self, binary=False) -&gt; IO[AnyStr]:\n    \"\"\"\n    Download the file contents.\n\n    :param binary: indicate if the file should be treated as binary, defaults\n    to False\n    :raises IsADirectoryError: if path points to a directory.\n    :raises SfApiError:\n    \"\"\"\n    if await self.is_dir():\n        raise IsADirectoryError(self._path)\n\n    r = await self.compute.client.get(\n        f\"utilities/download/{self.compute.name}/{self._path}?binary={binary}\"\n    )\n    json_response = r.json()\n    download_response = FileDownloadResponse.model_validate(json_response)\n\n    if download_response.status == FileDownloadResponseStatus.ERROR:\n        raise SfApiError(download_response.error)\n\n    file_data = download_response.file\n    if download_response.is_binary:\n        binary_file_data = b64decode(file_data)\n        return BytesIO(binary_file_data)\n    else:\n        return StringIO(file_data)\n</code></pre>"},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.is_dir","title":"<code>is_dir()</code>  <code>async</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p>Returns True if path is a directory, False otherwise.</p> Source code in <code>sfapi_client/_async/paths.py</code> <pre><code>async def is_dir(self) -&gt; bool:\n    \"\"\"\n    :return: Returns True if path is a directory, False otherwise.\n    \"\"\"\n    if self.perms is None:\n        await self.update()\n\n    return self.perms[0] == \"d\"\n</code></pre>"},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.is_file","title":"<code>is_file()</code>  <code>async</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p>Returns True if path is a file, False otherwise.</p> Source code in <code>sfapi_client/_async/paths.py</code> <pre><code>async def is_file(self) -&gt; bool:\n    \"\"\"\n    :return: Returns True if path is a file, False otherwise.\n    \"\"\"\n    return not await self.is_dir()\n</code></pre>"},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.ls","title":"<code>ls()</code>  <code>async</code>","text":"<p>List the current path</p> <p>Returns:</p> Type Description <code>List[AsyncRemotePath]</code> <p>the list of child paths</p> Source code in <code>sfapi_client/_async/paths.py</code> <pre><code>async def ls(self) -&gt; List[\"AsyncRemotePath\"]:\n    \"\"\"\n    List the current path\n\n    :return: the list of child paths\n    \"\"\"\n    return await self._ls(self.compute, str(self._path))\n</code></pre>"},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.open","title":"<code>open(mode)</code>  <code>async</code>","text":"<p>Open the file at this path.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>The mode to open the file. Valid options are 'rwb'.  raises: IsDirectoryError: If the path is not a file.</p> required Source code in <code>sfapi_client/_async/paths.py</code> <pre><code>@asynccontextmanager\nasync def open(self, mode: str) -&gt; IO[AnyStr]:\n    \"\"\"\n    Open the file at this path.\n\n    :param mode: The mode to open the file. Valid options are 'rwb'.\n\n    raises: IsDirectoryError: If the path is not a file.\n    \"\"\"\n    try:\n        if await self.is_dir():\n            raise IsADirectoryError()\n    except SfApiError as ex:\n        # Its a valid use case to add a open a new file to an exiting directory.\n        # In this case the is_dir() will raise a SfApiError with\n        # \"No such file or directory\" So we check for that and then see if the\n        # parent directory exists, if it does we can just continue.\n        if not _is_no_such(ex):\n            raise\n\n        # Check if the parent is a directory ( as in we are creating a new file ),\n        # if not re raise the original exception\n        if not await self.parent.is_dir():\n            raise\n\n    valid_modes_chars = set(\"rwb\")\n    mode_chars = set(mode)\n\n    # If we have duplicate raise exception\n    if len(mode_chars) != len(mode):\n        raise ValueError(f\"invalid mode: '{mode}'\")\n\n    # check mode chars\n    if not mode_chars.issubset(valid_modes_chars):\n        raise ValueError(f\"invalid mode: '{mode}'\")\n\n    # we don't support read/write\n    if \"r\" in mode_chars and \"w\" in mode_chars:\n        raise ValueError(f\"invalid mode: '{mode}', 'rw' not supported.\")\n\n    if \"r\" in mode_chars:\n        binary = \"b\" in mode_chars\n        yield await self.download(binary)\n    else:\n        tmp = None\n        try:\n            tmp = tempfile.NamedTemporaryFile(mode, delete=False)\n            yield tmp\n            tmp.close()\n            # Now upload the changes, we have to reopen the file to\n            # ensure binary mode\n            with open(tmp.name, \"rb\") as fp:\n                await self.upload(fp)\n        finally:\n            if tmp is not None:\n                tmp.close()\n                Path(tmp.name).unlink()\n</code></pre>"},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.update","title":"<code>update()</code>  <code>async</code>","text":"<p>Update the path in the latest information from the resource.</p> Source code in <code>sfapi_client/_async/paths.py</code> <pre><code>async def update(self):\n    \"\"\"\n    Update the path in the latest information from the resource.\n    \"\"\"\n    # Here we pass filter_dots=False so that we with get . if this is a\n    # directory\n    file_state = await self._ls(self.compute, str(self._path), filter_dots=False)\n    if len(file_state) == 0:\n        raise FileNotFoundError(self._path)\n\n    # We update the name as it could be . from a directory listing and in that\n    # case we don't want to update the name\n    new_state = file_state[0]\n    new_state.name = self.name\n\n    self._update(new_state)\n</code></pre>"},{"location":"reference/async/paths/#sfapi_client.paths.AsyncRemotePath.upload","title":"<code>upload(file)</code>  <code>async</code>","text":"Source code in <code>sfapi_client/_async/paths.py</code> <pre><code>async def upload(self, file: BytesIO) -&gt; \"AsyncRemotePath\":\n    try:\n        if await self.is_dir():\n            upload_path = f\"{str(self._path)}/{file.filename}\"\n        else:\n            upload_path = str(self._path)\n    except SfApiError as ex:\n        # Its a valid use case to add a upload a new file to an exiting directory.\n        # In this case the is_dir() will raise a SfApiError with\n        # \"No such file or directory\" So we check for that and then see if the\n        # parent directory exists, if it does we can just continue.\n        if not _is_no_such(ex):\n            raise\n\n        # Check if the parent is a directory ( as in we are creating a new file ),\n        # if not re raise the original exception\n        if not await self.parent.is_dir():\n            raise\n        else:\n            upload_path = str(self._path)\n\n    url = f\"utilities/upload/{self.compute.name}/{upload_path}\"\n    files = {\"file\": file}\n\n    r = await self.compute.client.put(url, files=files)\n\n    json_response = r.json()\n    upload_response = UploadResponse.model_validate(json_response)\n    if upload_response.status == UploadResponseStatus.ERROR:\n        raise SfApiError(upload_response.error)\n\n    remote_path = AsyncRemotePath(path=upload_path, compute=self.compute)\n\n    return remote_path\n</code></pre>"},{"location":"reference/async/projects/","title":"projects","text":""},{"location":"reference/async/projects/#asyncproject","title":"<code>AsyncProject</code>","text":"<p>A project or repo</p>"},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.cpu_hours_given","title":"<code>cpu_hours_given = Field(None, title='Cpu Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.cpu_hours_used","title":"<code>cpu_hours_used = Field(None, title='Cpu Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.cpu_project_hours_given","title":"<code>cpu_project_hours_given = Field(None, title='Cpu Project Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.cpu_project_hours_used","title":"<code>cpu_project_hours_used = Field(None, title='Cpu Project Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.description","title":"<code>description = Field(..., title='Description')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.gpu_hours_given","title":"<code>gpu_hours_given = Field(None, title='Gpu Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.gpu_hours_used","title":"<code>gpu_hours_used = Field(None, title='Gpu Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.gpu_project_hours_given","title":"<code>gpu_project_hours_given = Field(None, title='Gpu Project Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.gpu_project_hours_used","title":"<code>gpu_project_hours_used = Field(None, title='Gpu Project Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.hours_given","title":"<code>hours_given = Field(None, title='Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.hours_used","title":"<code>hours_used = Field(None, title='Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.hpss_usage","title":"<code>hpss_usage = Field(None, title='Hpss Usage')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.id","title":"<code>id = Field(..., title='Id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.iris_role","title":"<code>iris_role = Field(None, title='Iris Role')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.projdir_usage","title":"<code>projdir_usage = Field(None, title='Projdir Usage')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.project_hours_given","title":"<code>project_hours_given = Field(None, title='Project Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.project_hours_used","title":"<code>project_hours_used = Field(None, title='Project Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.project_projdir_usage","title":"<code>project_projdir_usage = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client._models.ProjectStats.repo_name","title":"<code>repo_name = Field(..., title='Repo Name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.cpu_hours_given","title":"<code>cpu_hours_given = Field(None, title='Cpu Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.cpu_hours_used","title":"<code>cpu_hours_used = Field(None, title='Cpu Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.cpu_project_hours_given","title":"<code>cpu_project_hours_given = Field(None, title='Cpu Project Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.cpu_project_hours_used","title":"<code>cpu_project_hours_used = Field(None, title='Cpu Project Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.description","title":"<code>description = Field(..., title='Description')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.gpu_hours_given","title":"<code>gpu_hours_given = Field(None, title='Gpu Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.gpu_hours_used","title":"<code>gpu_hours_used = Field(None, title='Gpu Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.gpu_project_hours_given","title":"<code>gpu_project_hours_given = Field(None, title='Gpu Project Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.gpu_project_hours_used","title":"<code>gpu_project_hours_used = Field(None, title='Gpu Project Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.hours_given","title":"<code>hours_given = Field(None, title='Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.hours_used","title":"<code>hours_used = Field(None, title='Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.hpss_usage","title":"<code>hpss_usage = Field(None, title='Hpss Usage')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.id","title":"<code>id = Field(..., title='Id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.iris_role","title":"<code>iris_role = Field(None, title='Iris Role')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.name","title":"<code>name = Field(alias='repo_name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.projdir_usage","title":"<code>projdir_usage = Field(None, title='Projdir Usage')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.project_hours_given","title":"<code>project_hours_given = Field(None, title='Project Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.project_hours_used","title":"<code>project_hours_used = Field(None, title='Project Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.project_projdir_usage","title":"<code>project_projdir_usage = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.repo_name","title":"<code>repo_name = Field(..., title='Repo Name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/projects/#sfapi_client.projects.AsyncProject.create_group","title":"<code>create_group(name)</code>  <code>async</code>","text":"<p>Create a new project.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The project name</p> required Source code in <code>sfapi_client/_async/projects.py</code> <pre><code>async def create_group(self, name: str) -&gt; \"AsyncGroup\":  # noqa: F821\n    \"\"\"\n    Create a new project.\n    :param name: The project name\n    \"\"\"\n    from .groups import AsyncGroup\n\n    params = {\"name\": name, \"repo_name\": self.repo_name}\n\n    r = await self.client.post(\"account/groups\", data=params)\n    json_response = r.json()\n    try:\n        group = AsyncGroup.model_validate(dict(json_response, client=self.client))\n    except ValidationError:\n        # See if we have validation error raise it\n        if \"details\" in json_response:\n            raise SfApiError(r.text())\n        else:\n            raise RuntimeError(r.text())\n\n    group.client = self.client\n\n    return group\n</code></pre>"},{"location":"reference/async/resources/","title":"resources","text":""},{"location":"reference/async/resources/#resource","title":"<code>Resource</code>","text":"<p>All resources at the site.</p> <p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/async/resources/#sfapi_client.Resource.archive","title":"<code>archive = 'archive'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>storage: HPSS Archive (User)</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.community_filesystem","title":"<code>community_filesystem = 'community_filesystem'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>filesystem: Community File System (CFS)</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.cori","title":"<code>cori = 'cori'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>compute: Cori</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.dna","title":"<code>dna = 'dna'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>filesystem: DNA</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.dtns","title":"<code>dtns = 'dtns'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>filesystem: Data Transfer Nodes</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.global_common","title":"<code>global_common = 'global_common'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>filesystem: Global Common</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.global_homes","title":"<code>global_homes = 'global_homes'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>filesystem: Global Homes</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.globus","title":"<code>globus = 'globus'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: Globus</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.helpportal","title":"<code>helpportal = 'helpportal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: Help Portal</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.integ_datalanguage","title":"<code>integ_datalanguage = 'integ_datalanguage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: Integrated Data Language</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.iris","title":"<code>iris = 'iris'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: IRIS</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.jgi_int_webservers","title":"<code>jgi_int_webservers = 'jgi_int_webservers'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: JGI db, int, and web servers</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.jgidb","title":"<code>jgidb = 'jgidb'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: JGI db</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.jupyter","title":"<code>jupyter = 'jupyter'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: Jupyter</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.ldap","title":"<code>ldap = 'ldap'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: LDAP</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.mathematica","title":"<code>mathematica = 'mathematica'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: Mathematica</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.matlab","title":"<code>matlab = 'matlab'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: MATLAB</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.mongodb","title":"<code>mongodb = 'mongodb'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: MongoDB</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.myproxy","title":"<code>myproxy = 'myproxy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: MyProxy</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.nersc_center","title":"<code>nersc_center = 'nersc_center'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: NERSC Center</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.network","title":"<code>network = 'network'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: Network</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.newt","title":"<code>newt = 'newt'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: NEWT</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.nomachine","title":"<code>nomachine = 'nomachine'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: NoMachine</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.perlmutter","title":"<code>perlmutter = 'perlmutter'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>compute: Perlmutter</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.regent","title":"<code>regent = 'regent'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>storage: HPSS Regent (Backup)</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.rstudio","title":"<code>rstudio = 'rstudio'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: R Studio</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.sciencedatabases","title":"<code>sciencedatabases = 'sciencedatabases'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: Science Databases</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.sgns","title":"<code>sgns = 'sgns'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: Science Gateway Services</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.spin","title":"<code>spin = 'spin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: Spin</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.ssh_proxy","title":"<code>ssh_proxy = 'ssh-proxy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: ssh-proxy</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.webservers","title":"<code>webservers = 'webservers'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: web servers</p>"},{"location":"reference/async/resources/#sfapi_client.Resource.website","title":"<code>website = 'website'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: NERSC Website</p>"},{"location":"reference/async/users/","title":"users","text":""},{"location":"reference/async/users/#asyncuser","title":"<code>AsyncUser</code>","text":"<p>A user.</p>"},{"location":"reference/async/users/#sfapi_client._models.UserInfo.email","title":"<code>email = Field(None, title='Email')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/users/#sfapi_client._models.UserInfo.firstname","title":"<code>firstname = Field(None, title='Firstname')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/users/#sfapi_client._models.UserInfo.lastname","title":"<code>lastname = Field(None, title='Lastname')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/users/#sfapi_client._models.UserInfo.middlename","title":"<code>middlename = Field(None, title='Middlename')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/users/#sfapi_client._models.UserInfo.name","title":"<code>name = Field(..., title='Name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/users/#sfapi_client._models.UserInfo.otherPhones","title":"<code>otherPhones = Field(None, title='Otherphones')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/users/#sfapi_client._models.UserInfo.uid","title":"<code>uid = Field(..., title='Uid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/users/#sfapi_client._models.UserInfo.workphone","title":"<code>workphone = Field(None, title='Workphone')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/users/#sfapi_client.users.AsyncUser.client","title":"<code>client</code>  <code>instance-attribute</code>","text":""},{"location":"reference/async/users/#sfapi_client.users.AsyncUser.email","title":"<code>email = Field(None, title='Email')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/users/#sfapi_client.users.AsyncUser.firstname","title":"<code>firstname = Field(None, title='Firstname')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/users/#sfapi_client.users.AsyncUser.lastname","title":"<code>lastname = Field(None, title='Lastname')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/users/#sfapi_client.users.AsyncUser.middlename","title":"<code>middlename = Field(None, title='Middlename')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/users/#sfapi_client.users.AsyncUser.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/users/#sfapi_client.users.AsyncUser.name","title":"<code>name = Field(..., title='Name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/users/#sfapi_client.users.AsyncUser.otherPhones","title":"<code>otherPhones = Field(None, title='Otherphones')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/users/#sfapi_client.users.AsyncUser.uid","title":"<code>uid = Field(..., title='Uid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/users/#sfapi_client.users.AsyncUser.workphone","title":"<code>workphone = Field(None, title='Workphone')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/async/users/#sfapi_client.users.AsyncUser.clients","title":"<code>clients()</code>  <code>async</code>","text":"<p>Get information about the authenticated user's SFAPI clients.</p> <p>Returns:</p> Type Description <code>List[Client]</code> <p>the api clients</p> Source code in <code>sfapi_client/_async/users.py</code> <pre><code>async def clients(self) -&gt; List[APIClient]:\n    \"\"\"\n    Get information about the authenticated user's SFAPI clients.\n\n    :return: the api clients\n    \"\"\"\n    r = await self.client.get(\"account/clients\")\n\n    json_response = r.json()\n\n    clients = [APIClient.model_validate(c) for c in json_response]\n\n    return clients\n</code></pre>"},{"location":"reference/async/users/#sfapi_client.users.AsyncUser.groups","title":"<code>groups()</code>  <code>async</code>","text":"<p>The groups that the user is a member of.</p> <p>Returns:</p> Type Description <code>List[AsyncGroup]</code> <p>the groups</p> Source code in <code>sfapi_client/_async/users.py</code> <pre><code>async def groups(self) -&gt; List[\"AsyncGroup\"]:  # noqa: F821\n    \"\"\"\n    The groups that the user is a member of.\n\n    :return: the groups\n    \"\"\"\n    # Avoid circular import\n    from .groups import AsyncGroup\n\n    if self.name != (await self.client._user()).name:\n        raise SfApiError(\"Can only fetch groups for authenticated user.\")\n\n    r = await self.client.get(\"account/groups\")\n\n    json_response = r.json()\n    groups_reponse = GroupsResponse.model_validate(json_response)\n\n    groups = [\n        AsyncGroup.model_validate(dict(g, client=self.client))\n        for g in groups_reponse.groups\n    ]\n\n    return groups\n</code></pre>"},{"location":"reference/async/users/#sfapi_client.users.AsyncUser.projects","title":"<code>projects()</code>  <code>async</code>","text":"<p>The projects the user is associate with.</p> <p>Returns:</p> Type Description <code>List[AsyncProject]</code> <p>the projects</p> Source code in <code>sfapi_client/_async/users.py</code> <pre><code>async def projects(self) -&gt; List[AsyncProject]:\n    \"\"\"\n    The projects the user is associate with.\n\n    :return: the projects\n    \"\"\"\n    if self.name != (await self.client._user()).name:\n        raise SfApiError(\"Can only fetch projects for authenticated user.\")\n\n    r = await self.client.get(\"account/projects\")\n\n    project_values = r.json()\n\n    projects = [\n        AsyncProject.model_validate(dict(p, client=self.client))\n        for p in project_values\n    ]\n\n    return projects\n</code></pre>"},{"location":"reference/async/users/#sfapi_client.users.AsyncUser.roles","title":"<code>roles()</code>  <code>async</code>","text":"<p>The roles the user is associate with.</p> <p>Returns:</p> Type Description <code>List[AsyncRole]</code> <p>the roles</p> Source code in <code>sfapi_client/_async/users.py</code> <pre><code>async def roles(self) -&gt; List[AsyncRole]:\n    \"\"\"\n    The roles the user is associate with.\n\n    :return: the roles\n    \"\"\"\n    if self.name != (await self.client._user()).name:\n        raise SfApiError(\"Can only fetch roles for authenticated user.\")\n\n    r = await self.client.get(\"account/roles\")\n\n    json_response = r.json()\n\n    roles = [\n        AsyncRole.model_validate(dict(p, client=self.client)) for p in json_response\n    ]\n\n    return roles\n</code></pre>"},{"location":"reference/sync/client/","title":"client","text":""},{"location":"reference/sync/client/#client","title":"<code>Client</code>","text":"<p>Create a client instance.</p> <p>Usage:</p> <pre><code>&gt;&gt;&gt; from sfapi_client import Client\n&gt;&gt;&gt; with Client(client_id, client_secret) as client:\n&gt;&gt;&gt;    # Use client\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>Optional[str]</code> <p>The client ID</p> <code>None</code> <code>secret</code> <code>Optional[str]</code> <p>The client secret</p> <code>None</code> <code>key</code> <code>Optional[Union[str, Path]]</code> <p>Full path to the client secret file, or path relative to <code>~</code> from the expanduser</p> <code>None</code> <code>api_base_url</code> <code>Optional[str]</code> <p>The API base URL</p> <code>SFAPI_BASE_URL</code> <code>token_url</code> <code>Optional[str]</code> <p>The token URL</p> <code>SFAPI_TOKEN_URL</code> <code>access_token</code> <code>Optional[str]</code> <p>An existing access token</p> <code>None</code> <p>Returns:</p> Type Description <code>Client</code> <p>The client instance</p> Source code in <code>sfapi_client/_sync/client.py</code> <pre><code>def __init__(\n    self,\n    client_id: Optional[str] = None,\n    secret: Optional[str] = None,\n    key: Optional[Union[str, Path]] = None,\n    api_base_url: Optional[str] = SFAPI_BASE_URL,\n    token_url: Optional[str] = SFAPI_TOKEN_URL,\n    access_token: Optional[str] = None,\n    wait_interval: int = 10,\n):\n    \"\"\"\n    Create a client instance.\n\n    Usage:\n\n    ```python\n    &gt;&gt;&gt; from sfapi_client import Client\n    &gt;&gt;&gt; with Client(client_id, client_secret) as client:\n    &gt;&gt;&gt;    # Use client\n    ```\n\n    :param client_id: The client ID\n    :param secret: The client secret\n    :param key: Full path to the client secret file, or path relative to `~` from the expanduser\n    :param api_base_url: The API base URL\n    :param token_url: The token URL\n    :param access_token: An existing access token\n\n    :return: The client instance\n    :rtype: Client\n    \"\"\"\n    self._client_id = None\n    self._secret = None\n    if any(arg is None for arg in [client_id, secret]):\n        self._read_client_secret_from_file(key)\n    else:\n        self._client_id = client_id\n        self._secret = secret\n    self._api_base_url = api_base_url\n    self._token_url = token_url\n    self._client_user = None\n    self.__http_client = None\n    self._api = None\n    self._resources = None\n    self._wait_interval = wait_interval\n    self._access_token = access_token\n</code></pre>"},{"location":"reference/sync/client/#sfapi_client.Client.api","title":"<code>api</code>  <code>property</code>","text":"<p>API related information.</p>"},{"location":"reference/sync/client/#sfapi_client.Client.resources","title":"<code>resources</code>  <code>property</code>","text":"<p>Resource related information.</p>"},{"location":"reference/sync/client/#sfapi_client.Client.token","title":"<code>token</code>  <code>property</code>","text":"<p>Bearer token string which can be helpful for debugging through swagger UI.</p>"},{"location":"reference/sync/client/#sfapi_client.Client.close","title":"<code>close()</code>","text":"<p>Release resources associated with the client instance.</p> Source code in <code>sfapi_client/_sync/client.py</code> <pre><code>def close(self):\n    \"\"\"\n    Release resources associated with the client instance.\n    \"\"\"\n    if self.__http_client is not None:\n        self.__http_client.close()\n</code></pre>"},{"location":"reference/sync/client/#sfapi_client.Client.compute","title":"<code>compute(machine)</code>","text":"<p>Create a compute site to submit jobs or view jobs in the queue</p> <p>Parameters:</p> Name Type Description Default <code>machine</code> <code>Union[Machine, str]</code> <p>Name of the compute machine to use</p> required <p>Returns:</p> Type Description <code>Compute</code> <p>Compute object that can be used to start jobs, view the queue on the system, or list files and directories.</p> Source code in <code>sfapi_client/_sync/client.py</code> <pre><code>def compute(self, machine: Union[Machine, str]) -&gt; Compute:\n    \"\"\"Create a compute site to submit jobs or view jobs in the queue\n\n    :param machine: Name of the compute machine to use\n    :return: Compute object that can be used to start jobs,\n    view the queue on the system, or list files and directories.\n    \"\"\"\n    # Allows for creating a compute from a name string\n    machine = Machine(machine)\n    response = self.get(f\"status/{machine.value}\")\n\n    values = response.json()\n    values[\"client\"] = self\n    compute = Compute.model_validate(values)\n\n    return compute\n</code></pre>"},{"location":"reference/sync/client/#sfapi_client.Client.group","title":"<code>group(name)</code>","text":"<p>Get a group.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The group name</p> required <p>Returns:</p> Type Description <code>Group</code> <p>The group</p> Source code in <code>sfapi_client/_sync/client.py</code> <pre><code>def group(self, name: str) -&gt; Group:\n    \"\"\"\n    Get a group.\n\n    :param name: The group name\n    :return: The group\n    :rtype: Group\n    \"\"\"\n    return Group._fetch_group(self, name)\n</code></pre>"},{"location":"reference/sync/client/#sfapi_client.Client.user","title":"<code>user(username=None)</code>","text":"<p>Get a user.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>Optional[str]</code> <p>The username</p> <code>None</code> <p>Returns:</p> Type Description <code>UserGroup</code> <p>The user</p> Source code in <code>sfapi_client/_sync/client.py</code> <pre><code>def user(self, username: Optional[str] = None) -&gt; User:\n    \"\"\"\n    Get a user.\n\n    :param username: The username\n    :return: The user\n    :rtype: UserGroup\n    \"\"\"\n    return User._fetch_user(self, username)\n</code></pre>"},{"location":"reference/sync/compute/","title":"compute","text":""},{"location":"reference/sync/compute/#compute","title":"<code>Compute</code>","text":"<p>A compute resource.</p> Source code in <code>sfapi_client/_sync/compute.py</code> <pre><code>def __init__(self, **kwargs):\n    super().__init__(**kwargs)\n    self._monitor = SyncJobMonitor(self)\n</code></pre>"},{"location":"reference/sync/compute/#sfapi_client._models.AppRoutersStatusModelsStatus.description","title":"<code>description = Field(None, title='Description')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/compute/#sfapi_client._models.AppRoutersStatusModelsStatus.full_name","title":"<code>full_name = Field(None, title='Full Name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/compute/#sfapi_client._models.AppRoutersStatusModelsStatus.name","title":"<code>name = Field(..., title='Name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/compute/#sfapi_client._models.AppRoutersStatusModelsStatus.notes","title":"<code>notes = Field(None, title='Notes')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/compute/#sfapi_client._models.AppRoutersStatusModelsStatus.status","title":"<code>status</code>  <code>instance-attribute</code>","text":""},{"location":"reference/sync/compute/#sfapi_client._models.AppRoutersStatusModelsStatus.system_type","title":"<code>system_type = Field(None, title='System Type')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/compute/#sfapi_client._models.AppRoutersStatusModelsStatus.updated_at","title":"<code>updated_at = Field(None, title='Updated At')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/compute/#sfapi_client.compute.Compute.submit_job","title":"<code>submit_job(script)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>script</code> <code>Union[str, RemotePath]</code> <p>Path to file on the compute system, or script to run beginning with <code>#!</code>.</p> required <p>Returns:</p> Type Description <code>JobSqueue</code> <p>Object containing information about the job, its job id, and status on the system.</p> Source code in <code>sfapi_client/_sync/compute.py</code> <pre><code>@check_auth\ndef submit_job(self, script: Union[str, RemotePath]) -&gt; JobSqueue:\n    \"\"\"Submit a job to the compute resource\n\n    :param script: Path to file on the compute system, or script to run beginning with `#!`.\n    :return: Object containing information about the job, its job id, and status on the system.\n    \"\"\"\n\n    is_path: bool = True\n\n    # If it's a remote path we've already checked so just continue\n    if isinstance(script, RemotePath):\n        pass\n    # If the string input looks like a script we'll set is_path to false\n    elif script.startswith(\"#!\") and \"\\n\" in script:\n        # If it starts with shebang and has multiple lines\n        is_path = False\n    else:\n        # If we're given a path make sure it exists\n        script_path = self.ls(script)\n        is_file = script_path[0].is_file()\n        if len(script_path) != 1 or not is_file:\n            raise SfApiError(f\"Script path not present or is not a file, {script}\")\n\n    data = {\"job\": script, \"isPath\": is_path}\n\n    r = self.client.post(f\"compute/jobs/{self.name}\", data)\n    r.raise_for_status()\n\n    json_response = r.json()\n    job_response = SubmitJobResponse.model_validate(json_response)\n\n    if job_response.status == SubmitJobResponseStatus.ERROR:\n        raise SfApiError(job_response.error)\n\n    task_id = job_response.task_id\n\n    # We now need waiting for the task to complete!\n    task_result = self._wait_for_task(task_id)\n    result = json.loads(task_result)\n    if result.get(\"status\") == \"error\":\n        raise SfApiError(result[\"error\"])\n\n    jobid = result.get(\"jobid\")\n    if jobid is None:\n        raise SfApiError(f\"Unable to extract jobid if for task: {task_id}\")\n\n    job = JobSqueue(jobid=jobid, compute=self)\n\n    return job\n</code></pre>"},{"location":"reference/sync/compute/#machine","title":"<code>Machine</code>","text":"<p>The possible compute resources.</p> <p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/sync/compute/#sfapi_client.compute.Machine.dtn01","title":"<code>dtn01 = 'dtn01'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/compute/#sfapi_client.compute.Machine.dtns","title":"<code>dtns = 'dtns'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/compute/#sfapi_client.compute.Machine.perlmutter","title":"<code>perlmutter = 'perlmutter'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/exceptions/","title":"exceptions","text":""},{"location":"reference/sync/exceptions/#sfapierror","title":"<code>SfApiError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception indicating an error occurred call the SF API.</p> Source code in <code>sfapi_client/exceptions.py</code> <pre><code>def __init__(self, message):\n    self.message = message\n</code></pre>"},{"location":"reference/sync/groups/","title":"groups","text":""},{"location":"reference/sync/groups/#group","title":"<code>Group</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A user group.</p>"},{"location":"reference/sync/groups/#sfapi_client.groups.Group.gid","title":"<code>gid</code>  <code>instance-attribute</code>","text":""},{"location":"reference/sync/groups/#sfapi_client.groups.Group.members","title":"<code>members</code>  <code>property</code>","text":"<p>The users in this group.</p>"},{"location":"reference/sync/groups/#sfapi_client.groups.Group.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/groups/#sfapi_client.groups.Group.name","title":"<code>name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/sync/groups/#sfapi_client.groups.Group.add","title":"<code>add(users)</code>","text":"<p>Add users to the group.</p> <p>Parameters:</p> Name Type Description Default <code>users</code> <code>Union[List[str], List[User]]</code> <p>The usernames to add</p> required Source code in <code>sfapi_client/_sync/groups.py</code> <pre><code>def add(self, users: Union[List[str], List[\"User\"]]):\n    \"\"\"\n    Add users to the group.\n\n    :param users: The usernames to add\n    \"\"\"\n    self._group_action(users, GroupAction.batch_add)\n</code></pre>"},{"location":"reference/sync/groups/#sfapi_client.groups.Group.remove","title":"<code>remove(users)</code>","text":"<p>Remove users from the group.</p> <p>Parameters:</p> Name Type Description Default <code>users</code> <code>Union[List[str], List[User]]</code> <p>The usernames to remove</p> required Source code in <code>sfapi_client/_sync/groups.py</code> <pre><code>def remove(self, users: Union[List[str], List[\"User\"]]):\n    \"\"\"\n    Remove users from the group.\n\n    :param users: The usernames to remove\n    \"\"\"\n    self._group_action(users, GroupAction.batch_remove)\n</code></pre>"},{"location":"reference/sync/groups/#sfapi_client.groups.Group.update","title":"<code>update()</code>","text":"<p>Update the state of the group by fetching the state from the server.</p> Source code in <code>sfapi_client/_sync/groups.py</code> <pre><code>def update(self):\n    \"\"\"\n    Update the state of the group by fetching the state from the server.\n    \"\"\"\n    group_state = self._fetch_group(self.client, self.name)\n    self._update(group_state)\n</code></pre>"},{"location":"reference/sync/groups/#groupmember","title":"<code>GroupMember</code>","text":"<p>A group member.</p>"},{"location":"reference/sync/groups/#sfapi_client._models.UserStats.name","title":"<code>name = Field(..., title='Name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/groups/#sfapi_client._models.UserStats.uid","title":"<code>uid = Field(..., title='Uid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/groups/#sfapi_client.groups.GroupMember.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/groups/#sfapi_client.groups.GroupMember.user","title":"<code>user()</code>","text":"<p>Get the user associated with the membership.</p> Source code in <code>sfapi_client/_sync/groups.py</code> <pre><code>def user(self) -&gt; \"User\":\n    \"\"\"\n    Get the user associated with the membership.\n    \"\"\"\n    return User._fetch_user(self.client, self.name)\n</code></pre>"},{"location":"reference/sync/jobs/","title":"jobs","text":""},{"location":"reference/sync/jobs/#jobstate","title":"<code>JobState</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>JobStates</p>"},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.BOOT_FAIL","title":"<code>BOOT_FAIL = 'BOOT_FAIL'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.CANCELLED","title":"<code>CANCELLED = 'CANCELLED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.COMPLETED","title":"<code>COMPLETED = 'COMPLETED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.COMPLETING","title":"<code>COMPLETING = 'COMPLETING'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.CONFIGURING","title":"<code>CONFIGURING = 'CONFIGURING'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.DEADLINE","title":"<code>DEADLINE = 'DEADLINE'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.FAILED","title":"<code>FAILED = 'FAILED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.NODE_FAIL","title":"<code>NODE_FAIL = 'NODE_FAIL'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.OUT_OF_MEMORY","title":"<code>OUT_OF_MEMORY = 'OUT_OF_MEMORY'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.PENDING","title":"<code>PENDING = 'PENDING'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.PREEMPTED","title":"<code>PREEMPTED = 'PREEMPTED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.REQUEUED","title":"<code>REQUEUED = 'REQUEUED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.REQUEUE_FED","title":"<code>REQUEUE_FED = 'REQUEUE_FED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.REQUEUE_HOLD","title":"<code>REQUEUE_HOLD = 'REQUEUE_HOLD'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.RESIZING","title":"<code>RESIZING = 'RESIZING'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.RESV_DEL_HOLD","title":"<code>RESV_DEL_HOLD = 'RESV_DEL_HOLD'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.REVOKED","title":"<code>REVOKED = 'REVOKED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.RUNNING","title":"<code>RUNNING = 'RUNNING'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.SIGNALING","title":"<code>SIGNALING = 'SIGNALING'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.SPECIAL_EXIT","title":"<code>SPECIAL_EXIT = 'SPECIAL_EXIT'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.STAGE_OUT","title":"<code>STAGE_OUT = 'STAGE_OUT'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.STOPPED","title":"<code>STOPPED = 'STOPPED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.SUSPENDED","title":"<code>SUSPENDED = 'SUSPENDED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobState.TIMEOUT","title":"<code>TIMEOUT = 'TIMEOUT'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#job","title":"<code>Job</code>","text":"<p>               Bases: <code>BaseModel</code>, <code>ABC</code></p> <p>Models a job submitted to run on a compute resource.</p>"},{"location":"reference/sync/jobs/#sfapi_client.jobs.Job.compute","title":"<code>compute = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.Job.jobid","title":"<code>jobid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.Job.state","title":"<code>state = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.Job.cancel","title":"<code>cancel(wait=False)</code>","text":"<p>Cancel a running job</p> <p>Parameters:</p> Name Type Description Default <code>wait</code> <code>bool</code> <p>True, to wait for job be to cancel, otherwise returns when cancellation has been submitted.</p> <code>False</code> Source code in <code>sfapi_client/_sync/jobs.py</code> <pre><code>def cancel(self, wait=False):\n    \"\"\"\n    Cancel a running job\n\n    :param wait: True, to wait for job be to cancel, otherwise returns when\n    cancellation\n    has been submitted.\n    :type wait: bool\n\n\n    \"\"\"\n    # We have wait for a jobid before we can cancel\n    while self.jobid is None:\n        _SLEEP()\n\n    self.compute.client.delete(\n        f\"compute/jobs/{self.compute.name}/{self.jobid}\"\n    )\n\n    if wait:\n        while self.state != JobState.CANCELLED:\n            self.update()\n            _SLEEP(self.compute.client._wait_interval)\n</code></pre>"},{"location":"reference/sync/jobs/#sfapi_client.jobs.Job.complete","title":"<code>complete(timeout=sys.maxsize)</code>","text":"<p>Wait for a job to move into a terminal state.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>The maximum time to wait in seconds, the actually wait time will be in 10 second increments.</p> <code>maxsize</code> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>if timeout is reached</p> Source code in <code>sfapi_client/_sync/jobs.py</code> <pre><code>def complete(self, timeout: int = sys.maxsize):\n    \"\"\"\n    Wait for a job to move into a terminal state.\n\n    :param timeout: The maximum time to wait in seconds, the actually\n    wait time will be in 10 second increments.\n    :raises TimeoutError: if timeout is reached\n    \"\"\"\n    return self._wait_until_complete(timeout)\n</code></pre>"},{"location":"reference/sync/jobs/#sfapi_client.jobs.Job.dict","title":"<code>dict(*args, **kwargs)</code>","text":"Source code in <code>sfapi_client/_sync/jobs.py</code> <pre><code>def dict(self, *args, **kwargs) -&gt; Dict:\n    if \"exclude\" not in kwargs:\n        kwargs[\"exclude\"] = {\"compute\"}\n    return super().dict(*args, **kwargs)\n</code></pre>"},{"location":"reference/sync/jobs/#sfapi_client.jobs.Job.running","title":"<code>running(timeout=sys.maxsize)</code>","text":"<p>Wait for a job to move into running state.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>The maximum time to wait in seconds, the actually wait time will be in 10 second increments.</p> <code>maxsize</code> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>if timeout if reached</p> Source code in <code>sfapi_client/_sync/jobs.py</code> <pre><code>def running(self, timeout: int = sys.maxsize):\n    \"\"\"\n    Wait for a job to move into running state.\n\n    :param timeout: The maximum time to wait in seconds, the actually wait\n    time will be in 10 second increments.\n    :raises TimeoutError: if timeout if reached\n    \"\"\"\n    state = self._wait_until([JobState.RUNNING] + TERMINAL_STATES, timeout)\n    if state != JobState.RUNNING:\n        raise SfApiError(\n            f\"Job never entered the running state, end state was: {state}\"\n        )\n\n    return state\n</code></pre>"},{"location":"reference/sync/jobs/#sfapi_client.jobs.Job.state_validate","title":"<code>state_validate(v)</code>","text":"Source code in <code>sfapi_client/_sync/jobs.py</code> <pre><code>@field_validator(\"state\", mode=\"before\", check_fields=False)\ndef state_validate(cls, v):\n    # sacct return a state of the form \"CANCELLED by XXXX\" for the\n    # cancelled state, coerce into value that will match a state\n    # modeled by the enum\n    if v.startswith(\"CANCELLED by\"):\n        return \"CANCELLED\"\n\n    return v\n</code></pre>"},{"location":"reference/sync/jobs/#sfapi_client.jobs.Job.update","title":"<code>update()</code>","text":"<p>Update the state of the job by fetching the state from the compute resource.</p> Source code in <code>sfapi_client/_sync/jobs.py</code> <pre><code>def update(self):\n    \"\"\"\n    Update the state of the job by fetching the state from the compute resource.\n    \"\"\"\n    job_state = self._fetch_state()\n    self._update(job_state)\n</code></pre>"},{"location":"reference/sync/jobs/#jobsacct","title":"<code>JobSacct</code>","text":"<p>Models a job running on a compute resource, the information is fetched using <code>sacct</code>.</p>"},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.account","title":"<code>account = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.array_job_id","title":"<code>array_job_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.array_task_id","title":"<code>array_task_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.command","title":"<code>command = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.comment","title":"<code>comment = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.contiguous","title":"<code>contiguous = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.core_spec","title":"<code>core_spec = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.cores_per_socket","title":"<code>cores_per_socket = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.cpus","title":"<code>cpus = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.dependency","title":"<code>dependency = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.end_time","title":"<code>end_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.exc_nodes","title":"<code>exc_nodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.exec_host","title":"<code>exec_host = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.features","title":"<code>features = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.field_","title":"<code>field_ = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.group","title":"<code>group = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.jobid","title":"<code>jobid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.licenses","title":"<code>licenses = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.min_cpus","title":"<code>min_cpus = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.min_memory","title":"<code>min_memory = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.min_tmp_disk","title":"<code>min_tmp_disk = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.name","title":"<code>name = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.nice","title":"<code>nice = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.nodelist","title":"<code>nodelist = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.nodelist_reason_","title":"<code>nodelist_reason_ = Field(None, alias='nodelist(reason)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.nodes","title":"<code>nodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.over_subscribe","title":"<code>over_subscribe = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.partition","title":"<code>partition = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.priority","title":"<code>priority = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.qos","title":"<code>qos = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.reason","title":"<code>reason = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.req_nodes","title":"<code>req_nodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.reservation","title":"<code>reservation = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.s_c_t","title":"<code>s_c_t = Field(None, alias='s:c:t')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.schednodes","title":"<code>schednodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.sockets_per_node","title":"<code>sockets_per_node = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.st","title":"<code>st = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.start_time","title":"<code>start_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.state","title":"<code>state = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.submit_time","title":"<code>submit_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.threads_per_core","title":"<code>threads_per_core = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.time","title":"<code>time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.time_left","title":"<code>time_left = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.time_limit","title":"<code>time_limit = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.tres_per_node","title":"<code>tres_per_node = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.uid","title":"<code>uid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.user","title":"<code>user = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.wckey","title":"<code>wckey = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_squeue.OutputItem.work_dir","title":"<code>work_dir = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#jobsqueue","title":"<code>JobSqueue</code>","text":"<p>Models a job running on a compute resource, the information is fetched using <code>squeue</code>.</p> <p>Models a job running on a compute resource, the information is fetched using <code>squeue</code>.</p>"},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.account","title":"<code>account = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.admincomment","title":"<code>admincomment = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.alloccpus","title":"<code>alloccpus = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.allocnodes","title":"<code>allocnodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.alloctres","title":"<code>alloctres = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.associd","title":"<code>associd = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.avecpu","title":"<code>avecpu = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.avecpufreq","title":"<code>avecpufreq = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.avediskread","title":"<code>avediskread = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.avediskwrite","title":"<code>avediskwrite = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.avepages","title":"<code>avepages = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.averss","title":"<code>averss = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.avevmsize","title":"<code>avevmsize = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.blockid","title":"<code>blockid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.cluster","title":"<code>cluster = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.comment","title":"<code>comment = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.constraints","title":"<code>constraints = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.consumedenergy","title":"<code>consumedenergy = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.consumedenergyraw","title":"<code>consumedenergyraw = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.cputime","title":"<code>cputime = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.cputimeraw","title":"<code>cputimeraw = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.dbindex","title":"<code>dbindex = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.derivedexitcode","title":"<code>derivedexitcode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.elapsed","title":"<code>elapsed = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.elapsedraw","title":"<code>elapsedraw = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.eligible","title":"<code>eligible = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.end","title":"<code>end = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.exitcode","title":"<code>exitcode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.flags","title":"<code>flags = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.gid","title":"<code>gid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.group","title":"<code>group = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.jobid","title":"<code>jobid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.jobidraw","title":"<code>jobidraw = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.jobname","title":"<code>jobname = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.layout","title":"<code>layout = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxdiskread","title":"<code>maxdiskread = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxdiskreadnode","title":"<code>maxdiskreadnode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxdiskreadtask","title":"<code>maxdiskreadtask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxdiskwrite","title":"<code>maxdiskwrite = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxdiskwritenode","title":"<code>maxdiskwritenode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxdiskwritetask","title":"<code>maxdiskwritetask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxpages","title":"<code>maxpages = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxpagesnode","title":"<code>maxpagesnode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxpagestask","title":"<code>maxpagestask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxrss","title":"<code>maxrss = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxrssnode","title":"<code>maxrssnode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxrsstask","title":"<code>maxrsstask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxvmsize","title":"<code>maxvmsize = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxvmsizenode","title":"<code>maxvmsizenode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.maxvmsizetask","title":"<code>maxvmsizetask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.mcslabel","title":"<code>mcslabel = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.mincpu","title":"<code>mincpu = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.mincpunode","title":"<code>mincpunode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.mincputask","title":"<code>mincputask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.ncpus","title":"<code>ncpus = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.nnodes","title":"<code>nnodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.nodelist","title":"<code>nodelist = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.ntasks","title":"<code>ntasks = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.partition","title":"<code>partition = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.priority","title":"<code>priority = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.qos","title":"<code>qos = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.qosraw","title":"<code>qosraw = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reason","title":"<code>reason = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reqcpufreq","title":"<code>reqcpufreq = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reqcpufreqgov","title":"<code>reqcpufreqgov = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reqcpufreqmax","title":"<code>reqcpufreqmax = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reqcpufreqmin","title":"<code>reqcpufreqmin = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reqcpus","title":"<code>reqcpus = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reqmem","title":"<code>reqmem = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reqnodes","title":"<code>reqnodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reqtres","title":"<code>reqtres = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reservation","title":"<code>reservation = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reservationid","title":"<code>reservationid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.reserved","title":"<code>reserved = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.resvcpu","title":"<code>resvcpu = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.resvcpuraw","title":"<code>resvcpuraw = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.start","title":"<code>start = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.state","title":"<code>state = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.submit","title":"<code>submit = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.suspended","title":"<code>suspended = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.systemcomment","title":"<code>systemcomment = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.systemcpu","title":"<code>systemcpu = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.timelimit","title":"<code>timelimit = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.timelimitraw","title":"<code>timelimitraw = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.totalcpu","title":"<code>totalcpu = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageinave","title":"<code>tresusageinave = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageinmax","title":"<code>tresusageinmax = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageinmaxnode","title":"<code>tresusageinmaxnode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageinmaxtask","title":"<code>tresusageinmaxtask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageinmin","title":"<code>tresusageinmin = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageinminnode","title":"<code>tresusageinminnode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageinmintask","title":"<code>tresusageinmintask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageintot","title":"<code>tresusageintot = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageoutave","title":"<code>tresusageoutave = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageoutmax","title":"<code>tresusageoutmax = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageoutmaxnode","title":"<code>tresusageoutmaxnode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageoutmaxtask","title":"<code>tresusageoutmaxtask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageoutmin","title":"<code>tresusageoutmin = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageoutminnode","title":"<code>tresusageoutminnode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageoutmintask","title":"<code>tresusageoutmintask = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.tresusageouttot","title":"<code>tresusageouttot = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.uid","title":"<code>uid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.user","title":"<code>user = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.usercpu","title":"<code>usercpu = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.wckey","title":"<code>wckey = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.wckeyid","title":"<code>wckeyid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client._models.job_status_response_sacct.OutputItem.workdir","title":"<code>workdir = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.account","title":"<code>account = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.array_job_id","title":"<code>array_job_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.array_task_id","title":"<code>array_task_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.command","title":"<code>command = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.comment","title":"<code>comment = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.compute","title":"<code>compute = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.contiguous","title":"<code>contiguous = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.core_spec","title":"<code>core_spec = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.cores_per_socket","title":"<code>cores_per_socket = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.cpus","title":"<code>cpus = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.dependency","title":"<code>dependency = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.end_time","title":"<code>end_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.exc_nodes","title":"<code>exc_nodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.exec_host","title":"<code>exec_host = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.features","title":"<code>features = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.field_","title":"<code>field_ = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.group","title":"<code>group = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.jobid","title":"<code>jobid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.licenses","title":"<code>licenses = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.min_cpus","title":"<code>min_cpus = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.min_memory","title":"<code>min_memory = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.min_tmp_disk","title":"<code>min_tmp_disk = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.name","title":"<code>name = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.nice","title":"<code>nice = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.nodelist","title":"<code>nodelist = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.nodelist_reason_","title":"<code>nodelist_reason_ = Field(None, alias='nodelist(reason)')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.nodes","title":"<code>nodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.over_subscribe","title":"<code>over_subscribe = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.partition","title":"<code>partition = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.priority","title":"<code>priority = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.qos","title":"<code>qos = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.reason","title":"<code>reason = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.req_nodes","title":"<code>req_nodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.reservation","title":"<code>reservation = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.s_c_t","title":"<code>s_c_t = Field(None, alias='s:c:t')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.schednodes","title":"<code>schednodes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.sockets_per_node","title":"<code>sockets_per_node = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.st","title":"<code>st = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.start_time","title":"<code>start_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.state","title":"<code>state = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.submit_time","title":"<code>submit_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.threads_per_core","title":"<code>threads_per_core = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.time","title":"<code>time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.time_left","title":"<code>time_left = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.time_limit","title":"<code>time_limit = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.tres_per_node","title":"<code>tres_per_node = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.uid","title":"<code>uid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.user","title":"<code>user = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.wckey","title":"<code>wckey = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.work_dir","title":"<code>work_dir = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.cancel","title":"<code>cancel(wait=False)</code>","text":"<p>Cancel a running job</p> <p>Parameters:</p> Name Type Description Default <code>wait</code> <code>bool</code> <p>True, to wait for job be to cancel, otherwise returns when cancellation has been submitted.</p> <code>False</code> Source code in <code>sfapi_client/_sync/jobs.py</code> <pre><code>def cancel(self, wait=False):\n    \"\"\"\n    Cancel a running job\n\n    :param wait: True, to wait for job be to cancel, otherwise returns when\n    cancellation\n    has been submitted.\n    :type wait: bool\n\n\n    \"\"\"\n    # We have wait for a jobid before we can cancel\n    while self.jobid is None:\n        _SLEEP()\n\n    self.compute.client.delete(\n        f\"compute/jobs/{self.compute.name}/{self.jobid}\"\n    )\n\n    if wait:\n        while self.state != JobState.CANCELLED:\n            self.update()\n            _SLEEP(self.compute.client._wait_interval)\n</code></pre>"},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.complete","title":"<code>complete(timeout=sys.maxsize)</code>","text":"<p>Wait for a job to move into a terminal state.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>The maximum time to wait in seconds, the actually wait time will be in 10 second increments.</p> <code>maxsize</code> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>if timeout is reached</p> Source code in <code>sfapi_client/_sync/jobs.py</code> <pre><code>def complete(self, timeout: int = sys.maxsize):\n    \"\"\"\n    Wait for a job to move into a terminal state.\n\n    :param timeout: The maximum time to wait in seconds, the actually\n    wait time will be in 10 second increments.\n    :raises TimeoutError: if timeout is reached\n    \"\"\"\n    return self._wait_until_complete(timeout)\n</code></pre>"},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.dict","title":"<code>dict(*args, **kwargs)</code>","text":"Source code in <code>sfapi_client/_sync/jobs.py</code> <pre><code>def dict(self, *args, **kwargs) -&gt; Dict:\n    if \"exclude\" not in kwargs:\n        kwargs[\"exclude\"] = {\"compute\"}\n    return super().dict(*args, **kwargs)\n</code></pre>"},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.running","title":"<code>running(timeout=sys.maxsize)</code>","text":"<p>Wait for a job to move into running state.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>int</code> <p>The maximum time to wait in seconds, the actually wait time will be in 10 second increments.</p> <code>maxsize</code> <p>Raises:</p> Type Description <code>TimeoutError</code> <p>if timeout if reached</p> Source code in <code>sfapi_client/_sync/jobs.py</code> <pre><code>def running(self, timeout: int = sys.maxsize):\n    \"\"\"\n    Wait for a job to move into running state.\n\n    :param timeout: The maximum time to wait in seconds, the actually wait\n    time will be in 10 second increments.\n    :raises TimeoutError: if timeout if reached\n    \"\"\"\n    state = self._wait_until([JobState.RUNNING] + TERMINAL_STATES, timeout)\n    if state != JobState.RUNNING:\n        raise SfApiError(\n            f\"Job never entered the running state, end state was: {state}\"\n        )\n\n    return state\n</code></pre>"},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.state_validate","title":"<code>state_validate(v)</code>","text":"Source code in <code>sfapi_client/_sync/jobs.py</code> <pre><code>@field_validator(\"state\", mode=\"before\", check_fields=False)\ndef state_validate(cls, v):\n    # sacct return a state of the form \"CANCELLED by XXXX\" for the\n    # cancelled state, coerce into value that will match a state\n    # modeled by the enum\n    if v.startswith(\"CANCELLED by\"):\n        return \"CANCELLED\"\n\n    return v\n</code></pre>"},{"location":"reference/sync/jobs/#sfapi_client.jobs.JobSqueue.update","title":"<code>update()</code>","text":"<p>Update the state of the job by fetching the state from the compute resource.</p> Source code in <code>sfapi_client/_sync/jobs.py</code> <pre><code>def update(self):\n    \"\"\"\n    Update the state of the job by fetching the state from the compute resource.\n    \"\"\"\n    job_state = self._fetch_state()\n    self._update(job_state)\n</code></pre>"},{"location":"reference/sync/paths/","title":"paths","text":""},{"location":"reference/sync/paths/#remotepath","title":"<code>RemotePath</code>","text":"<p>RemotePath is used to model a remote path, it takes inspiration from <code>pathlib</code> and shares some of its interface.</p> <p>RemotePath is used to model a remote path, it takes inspiration from pathlib and shares some of its interface.</p> Source code in <code>sfapi_client/_sync/paths.py</code> <pre><code>def __init__(self, path=None, **kwargs):\n    super().__init__(**kwargs)\n    self._path = PurePosixPath(path)\n\n    if self.name is None:\n        self.name = self._path.name\n</code></pre>"},{"location":"reference/sync/paths/#sfapi_client._models.DirectoryEntry.date","title":"<code>date = Field(None, title='Date')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/paths/#sfapi_client._models.DirectoryEntry.group","title":"<code>group = Field(None, title='Group')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/paths/#sfapi_client._models.DirectoryEntry.hardlinks","title":"<code>hardlinks = Field(0, title='Hardlinks')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/paths/#sfapi_client._models.DirectoryEntry.name","title":"<code>name = Field(None, title='Name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/paths/#sfapi_client._models.DirectoryEntry.perms","title":"<code>perms = Field(None, title='Perms')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/paths/#sfapi_client._models.DirectoryEntry.size","title":"<code>size = Field(0, title='Size')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/paths/#sfapi_client._models.DirectoryEntry.user","title":"<code>user = Field(None, title='User')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.compute","title":"<code>compute</code>  <code>instance-attribute</code>","text":""},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.date","title":"<code>date = Field(None, title='Date')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.group","title":"<code>group = Field(None, title='Group')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.hardlinks","title":"<code>hardlinks = Field(0, title='Hardlinks')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.name","title":"<code>name = self._path.name</code>  <code>instance-attribute</code>","text":""},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.parent","title":"<code>parent</code>  <code>property</code>","text":"<p>The parent of the path.</p> <p>Returns:</p> Type Description <code>RemotePath</code> <p>the parent</p>"},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.parents","title":"<code>parents</code>  <code>property</code>","text":"<p>The parents of the path.</p> <p>Returns:</p> Type Description <code>List[RemotePath]</code> <p>the parents</p>"},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.parts","title":"<code>parts</code>  <code>property</code>","text":"<p>The paths components as a tuple.</p> <p>Returns:</p> Type Description <code>Tuple[str]</code> <p>the path components</p>"},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.perms","title":"<code>perms = Field(None, title='Perms')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.size","title":"<code>size = Field(0, title='Size')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.stem","title":"<code>stem</code>  <code>property</code>","text":"<p>The final path component, without its suffix.</p> <p>Returns:</p> Type Description <code>str</code> <p>the path stem</p>"},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.suffix","title":"<code>suffix</code>  <code>property</code>","text":"<p>The path extension.</p> <p>Returns:</p> Type Description <code>str</code> <p>the path extension</p>"},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.suffixes","title":"<code>suffixes</code>  <code>property</code>","text":"<p>A list of the path extensions.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>the path extensions</p>"},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.user","title":"<code>user = Field(None, title='User')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.dict","title":"<code>dict(*args, **kwargs)</code>","text":"Source code in <code>sfapi_client/_sync/paths.py</code> <pre><code>def dict(self, *args, **kwargs) -&gt; Dict:\n    if \"exclude\" not in kwargs:\n        kwargs[\"exclude\"] = {\"compute\"}\n    return super().dict(*args, **kwargs)\n</code></pre>"},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.download","title":"<code>download(binary=False)</code>","text":"<p>Download the file contents.</p> <p>Parameters:</p> Name Type Description Default <code>binary</code> <p>indicate if the file should be treated as binary, defaults to False</p> <code>False</code> <p>Raises:</p> Type Description <code>IsADirectoryError</code> <p>if path points to a directory.</p> <code>SfApiError</code> Source code in <code>sfapi_client/_sync/paths.py</code> <pre><code>def download(self, binary=False) -&gt; IO[AnyStr]:\n    \"\"\"\n    Download the file contents.\n\n    :param binary: indicate if the file should be treated as binary, defaults\n    to False\n    :raises IsADirectoryError: if path points to a directory.\n    :raises SfApiError:\n    \"\"\"\n    if self.is_dir():\n        raise IsADirectoryError(self._path)\n\n    r = self.compute.client.get(\n        f\"utilities/download/{self.compute.name}/{self._path}?binary={binary}\"\n    )\n    json_response = r.json()\n    download_response = FileDownloadResponse.model_validate(json_response)\n\n    if download_response.status == FileDownloadResponseStatus.ERROR:\n        raise SfApiError(download_response.error)\n\n    file_data = download_response.file\n    if download_response.is_binary:\n        binary_file_data = b64decode(file_data)\n        return BytesIO(binary_file_data)\n    else:\n        return StringIO(file_data)\n</code></pre>"},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.is_dir","title":"<code>is_dir()</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p>Returns True if path is a directory, False otherwise.</p> Source code in <code>sfapi_client/_sync/paths.py</code> <pre><code>def is_dir(self) -&gt; bool:\n    \"\"\"\n    :return: Returns True if path is a directory, False otherwise.\n    \"\"\"\n    if self.perms is None:\n        self.update()\n\n    return self.perms[0] == \"d\"\n</code></pre>"},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.is_file","title":"<code>is_file()</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p>Returns True if path is a file, False otherwise.</p> Source code in <code>sfapi_client/_sync/paths.py</code> <pre><code>def is_file(self) -&gt; bool:\n    \"\"\"\n    :return: Returns True if path is a file, False otherwise.\n    \"\"\"\n    return not self.is_dir()\n</code></pre>"},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.ls","title":"<code>ls()</code>","text":"<p>List the current path</p> <p>Returns:</p> Type Description <code>List[RemotePath]</code> <p>the list of child paths</p> Source code in <code>sfapi_client/_sync/paths.py</code> <pre><code>def ls(self) -&gt; List[\"RemotePath\"]:\n    \"\"\"\n    List the current path\n\n    :return: the list of child paths\n    \"\"\"\n    return self._ls(self.compute, str(self._path))\n</code></pre>"},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.open","title":"<code>open(mode)</code>","text":"<p>Open the file at this path.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>The mode to open the file. Valid options are 'rwb'.  raises: IsDirectoryError: If the path is not a file.</p> required Source code in <code>sfapi_client/_sync/paths.py</code> <pre><code>@contextmanager\ndef open(self, mode: str) -&gt; IO[AnyStr]:\n    \"\"\"\n    Open the file at this path.\n\n    :param mode: The mode to open the file. Valid options are 'rwb'.\n\n    raises: IsDirectoryError: If the path is not a file.\n    \"\"\"\n    try:\n        if self.is_dir():\n            raise IsADirectoryError()\n    except SfApiError as ex:\n        # Its a valid use case to add a open a new file to an exiting directory.\n        # In this case the is_dir() will raise a SfApiError with\n        # \"No such file or directory\" So we check for that and then see if the\n        # parent directory exists, if it does we can just continue.\n        if not _is_no_such(ex):\n            raise\n\n        # Check if the parent is a directory ( as in we are creating a new file ),\n        # if not re raise the original exception\n        if not self.parent.is_dir():\n            raise\n\n    valid_modes_chars = set(\"rwb\")\n    mode_chars = set(mode)\n\n    # If we have duplicate raise exception\n    if len(mode_chars) != len(mode):\n        raise ValueError(f\"invalid mode: '{mode}'\")\n\n    # check mode chars\n    if not mode_chars.issubset(valid_modes_chars):\n        raise ValueError(f\"invalid mode: '{mode}'\")\n\n    # we don't support read/write\n    if \"r\" in mode_chars and \"w\" in mode_chars:\n        raise ValueError(f\"invalid mode: '{mode}', 'rw' not supported.\")\n\n    if \"r\" in mode_chars:\n        binary = \"b\" in mode_chars\n        yield self.download(binary)\n    else:\n        tmp = None\n        try:\n            tmp = tempfile.NamedTemporaryFile(mode, delete=False)\n            yield tmp\n            tmp.close()\n            # Now upload the changes, we have to reopen the file to\n            # ensure binary mode\n            with open(tmp.name, \"rb\") as fp:\n                self.upload(fp)\n        finally:\n            if tmp is not None:\n                tmp.close()\n                Path(tmp.name).unlink()\n</code></pre>"},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.update","title":"<code>update()</code>","text":"<p>Update the path in the latest information from the resource.</p> Source code in <code>sfapi_client/_sync/paths.py</code> <pre><code>def update(self):\n    \"\"\"\n    Update the path in the latest information from the resource.\n    \"\"\"\n    # Here we pass filter_dots=False so that we with get . if this is a\n    # directory\n    file_state = self._ls(self.compute, str(self._path), filter_dots=False)\n    if len(file_state) == 0:\n        raise FileNotFoundError(self._path)\n\n    # We update the name as it could be . from a directory listing and in that\n    # case we don't want to update the name\n    new_state = file_state[0]\n    new_state.name = self.name\n\n    self._update(new_state)\n</code></pre>"},{"location":"reference/sync/paths/#sfapi_client.paths.RemotePath.upload","title":"<code>upload(file)</code>","text":"Source code in <code>sfapi_client/_sync/paths.py</code> <pre><code>def upload(self, file: BytesIO) -&gt; \"RemotePath\":\n    try:\n        if self.is_dir():\n            upload_path = f\"{str(self._path)}/{file.filename}\"\n        else:\n            upload_path = str(self._path)\n    except SfApiError as ex:\n        # Its a valid use case to add a upload a new file to an exiting directory.\n        # In this case the is_dir() will raise a SfApiError with\n        # \"No such file or directory\" So we check for that and then see if the\n        # parent directory exists, if it does we can just continue.\n        if not _is_no_such(ex):\n            raise\n\n        # Check if the parent is a directory ( as in we are creating a new file ),\n        # if not re raise the original exception\n        if not self.parent.is_dir():\n            raise\n        else:\n            upload_path = str(self._path)\n\n    url = f\"utilities/upload/{self.compute.name}/{upload_path}\"\n    files = {\"file\": file}\n\n    r = self.compute.client.put(url, files=files)\n\n    json_response = r.json()\n    upload_response = UploadResponse.model_validate(json_response)\n    if upload_response.status == UploadResponseStatus.ERROR:\n        raise SfApiError(upload_response.error)\n\n    remote_path = RemotePath(path=upload_path, compute=self.compute)\n\n    return remote_path\n</code></pre>"},{"location":"reference/sync/projects/","title":"projects","text":""},{"location":"reference/sync/projects/#project","title":"<code>Project</code>","text":"<p>A project or repo</p>"},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.cpu_hours_given","title":"<code>cpu_hours_given = Field(None, title='Cpu Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.cpu_hours_used","title":"<code>cpu_hours_used = Field(None, title='Cpu Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.cpu_project_hours_given","title":"<code>cpu_project_hours_given = Field(None, title='Cpu Project Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.cpu_project_hours_used","title":"<code>cpu_project_hours_used = Field(None, title='Cpu Project Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.description","title":"<code>description = Field(..., title='Description')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.gpu_hours_given","title":"<code>gpu_hours_given = Field(None, title='Gpu Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.gpu_hours_used","title":"<code>gpu_hours_used = Field(None, title='Gpu Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.gpu_project_hours_given","title":"<code>gpu_project_hours_given = Field(None, title='Gpu Project Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.gpu_project_hours_used","title":"<code>gpu_project_hours_used = Field(None, title='Gpu Project Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.hours_given","title":"<code>hours_given = Field(None, title='Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.hours_used","title":"<code>hours_used = Field(None, title='Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.hpss_usage","title":"<code>hpss_usage = Field(None, title='Hpss Usage')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.id","title":"<code>id = Field(..., title='Id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.iris_role","title":"<code>iris_role = Field(None, title='Iris Role')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.projdir_usage","title":"<code>projdir_usage = Field(None, title='Projdir Usage')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.project_hours_given","title":"<code>project_hours_given = Field(None, title='Project Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.project_hours_used","title":"<code>project_hours_used = Field(None, title='Project Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.project_projdir_usage","title":"<code>project_projdir_usage = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client._models.ProjectStats.repo_name","title":"<code>repo_name = Field(..., title='Repo Name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.cpu_hours_given","title":"<code>cpu_hours_given = Field(None, title='Cpu Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.cpu_hours_used","title":"<code>cpu_hours_used = Field(None, title='Cpu Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.cpu_project_hours_given","title":"<code>cpu_project_hours_given = Field(None, title='Cpu Project Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.cpu_project_hours_used","title":"<code>cpu_project_hours_used = Field(None, title='Cpu Project Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.description","title":"<code>description = Field(..., title='Description')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.gpu_hours_given","title":"<code>gpu_hours_given = Field(None, title='Gpu Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.gpu_hours_used","title":"<code>gpu_hours_used = Field(None, title='Gpu Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.gpu_project_hours_given","title":"<code>gpu_project_hours_given = Field(None, title='Gpu Project Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.gpu_project_hours_used","title":"<code>gpu_project_hours_used = Field(None, title='Gpu Project Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.hours_given","title":"<code>hours_given = Field(None, title='Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.hours_used","title":"<code>hours_used = Field(None, title='Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.hpss_usage","title":"<code>hpss_usage = Field(None, title='Hpss Usage')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.id","title":"<code>id = Field(..., title='Id')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.iris_role","title":"<code>iris_role = Field(None, title='Iris Role')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.name","title":"<code>name = Field(alias='repo_name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.projdir_usage","title":"<code>projdir_usage = Field(None, title='Projdir Usage')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.project_hours_given","title":"<code>project_hours_given = Field(None, title='Project Hours Given')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.project_hours_used","title":"<code>project_hours_used = Field(None, title='Project Hours Used')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.project_projdir_usage","title":"<code>project_projdir_usage = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.repo_name","title":"<code>repo_name = Field(..., title='Repo Name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/projects/#sfapi_client.projects.Project.create_group","title":"<code>create_group(name)</code>","text":"<p>Create a new project.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The project name</p> required Source code in <code>sfapi_client/_sync/projects.py</code> <pre><code>def create_group(self, name: str) -&gt; \"Group\":  # noqa: F821\n    \"\"\"\n    Create a new project.\n    :param name: The project name\n    \"\"\"\n    from .groups import Group\n\n    params = {\"name\": name, \"repo_name\": self.repo_name}\n\n    r = self.client.post(\"account/groups\", data=params)\n    json_response = r.json()\n    try:\n        group = Group.model_validate(dict(json_response, client=self.client))\n    except ValidationError:\n        # See if we have validation error raise it\n        if \"details\" in json_response:\n            raise SfApiError(r.text())\n        else:\n            raise RuntimeError(r.text())\n\n    group.client = self.client\n\n    return group\n</code></pre>"},{"location":"reference/sync/resources/","title":"resources","text":""},{"location":"reference/sync/resources/#resource","title":"<code>Resource</code>","text":"<p>All resources at the site.</p> <p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.archive","title":"<code>archive = 'archive'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>storage: HPSS Archive (User)</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.community_filesystem","title":"<code>community_filesystem = 'community_filesystem'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>filesystem: Community File System (CFS)</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.cori","title":"<code>cori = 'cori'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>compute: Cori</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.dna","title":"<code>dna = 'dna'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>filesystem: DNA</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.dtns","title":"<code>dtns = 'dtns'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>filesystem: Data Transfer Nodes</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.global_common","title":"<code>global_common = 'global_common'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>filesystem: Global Common</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.global_homes","title":"<code>global_homes = 'global_homes'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>filesystem: Global Homes</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.globus","title":"<code>globus = 'globus'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: Globus</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.helpportal","title":"<code>helpportal = 'helpportal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: Help Portal</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.integ_datalanguage","title":"<code>integ_datalanguage = 'integ_datalanguage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: Integrated Data Language</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.iris","title":"<code>iris = 'iris'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: IRIS</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.jgi_int_webservers","title":"<code>jgi_int_webservers = 'jgi_int_webservers'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: JGI db, int, and web servers</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.jgidb","title":"<code>jgidb = 'jgidb'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: JGI db</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.jupyter","title":"<code>jupyter = 'jupyter'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: Jupyter</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.ldap","title":"<code>ldap = 'ldap'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: LDAP</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.mathematica","title":"<code>mathematica = 'mathematica'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: Mathematica</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.matlab","title":"<code>matlab = 'matlab'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: MATLAB</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.mongodb","title":"<code>mongodb = 'mongodb'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: MongoDB</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.myproxy","title":"<code>myproxy = 'myproxy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: MyProxy</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.nersc_center","title":"<code>nersc_center = 'nersc_center'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: NERSC Center</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.network","title":"<code>network = 'network'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: Network</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.newt","title":"<code>newt = 'newt'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: NEWT</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.nomachine","title":"<code>nomachine = 'nomachine'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: NoMachine</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.perlmutter","title":"<code>perlmutter = 'perlmutter'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>compute: Perlmutter</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.regent","title":"<code>regent = 'regent'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>storage: HPSS Regent (Backup)</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.rstudio","title":"<code>rstudio = 'rstudio'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: R Studio</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.sciencedatabases","title":"<code>sciencedatabases = 'sciencedatabases'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: Science Databases</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.sgns","title":"<code>sgns = 'sgns'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: Science Gateway Services</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.spin","title":"<code>spin = 'spin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: Spin</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.ssh_proxy","title":"<code>ssh_proxy = 'ssh-proxy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: ssh-proxy</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.webservers","title":"<code>webservers = 'webservers'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: web servers</p>"},{"location":"reference/sync/resources/#sfapi_client.Resource.website","title":"<code>website = 'website'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>service: NERSC Website</p>"},{"location":"reference/sync/users/","title":"users","text":""},{"location":"reference/sync/users/#user","title":"<code>User</code>","text":"<p>A user.</p>"},{"location":"reference/sync/users/#sfapi_client._models.UserInfo.email","title":"<code>email = Field(None, title='Email')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/users/#sfapi_client._models.UserInfo.firstname","title":"<code>firstname = Field(None, title='Firstname')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/users/#sfapi_client._models.UserInfo.lastname","title":"<code>lastname = Field(None, title='Lastname')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/users/#sfapi_client._models.UserInfo.middlename","title":"<code>middlename = Field(None, title='Middlename')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/users/#sfapi_client._models.UserInfo.name","title":"<code>name = Field(..., title='Name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/users/#sfapi_client._models.UserInfo.otherPhones","title":"<code>otherPhones = Field(None, title='Otherphones')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/users/#sfapi_client._models.UserInfo.uid","title":"<code>uid = Field(..., title='Uid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/users/#sfapi_client._models.UserInfo.workphone","title":"<code>workphone = Field(None, title='Workphone')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/users/#sfapi_client.users.User.client","title":"<code>client</code>  <code>instance-attribute</code>","text":""},{"location":"reference/sync/users/#sfapi_client.users.User.email","title":"<code>email = Field(None, title='Email')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/users/#sfapi_client.users.User.firstname","title":"<code>firstname = Field(None, title='Firstname')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/users/#sfapi_client.users.User.lastname","title":"<code>lastname = Field(None, title='Lastname')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/users/#sfapi_client.users.User.middlename","title":"<code>middlename = Field(None, title='Middlename')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/users/#sfapi_client.users.User.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/users/#sfapi_client.users.User.name","title":"<code>name = Field(..., title='Name')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/users/#sfapi_client.users.User.otherPhones","title":"<code>otherPhones = Field(None, title='Otherphones')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/users/#sfapi_client.users.User.uid","title":"<code>uid = Field(..., title='Uid')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/users/#sfapi_client.users.User.workphone","title":"<code>workphone = Field(None, title='Workphone')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/sync/users/#sfapi_client.users.User.clients","title":"<code>clients()</code>","text":"<p>Get information about the authenticated user's SFAPI clients.</p> <p>Returns:</p> Type Description <code>List[Client]</code> <p>the api clients</p> Source code in <code>sfapi_client/_sync/users.py</code> <pre><code>def clients(self) -&gt; List[APIClient]:\n    \"\"\"\n    Get information about the authenticated user's SFAPI clients.\n\n    :return: the api clients\n    \"\"\"\n    r = self.client.get(\"account/clients\")\n\n    json_response = r.json()\n\n    clients = [APIClient.model_validate(c) for c in json_response]\n\n    return clients\n</code></pre>"},{"location":"reference/sync/users/#sfapi_client.users.User.groups","title":"<code>groups()</code>","text":"<p>The groups that the user is a member of.</p> <p>Returns:</p> Type Description <code>List[Group]</code> <p>the groups</p> Source code in <code>sfapi_client/_sync/users.py</code> <pre><code>def groups(self) -&gt; List[\"Group\"]:  # noqa: F821\n    \"\"\"\n    The groups that the user is a member of.\n\n    :return: the groups\n    \"\"\"\n    # Avoid circular import\n    from .groups import Group\n\n    if self.name != (self.client._user()).name:\n        raise SfApiError(\"Can only fetch groups for authenticated user.\")\n\n    r = self.client.get(\"account/groups\")\n\n    json_response = r.json()\n    groups_reponse = GroupsResponse.model_validate(json_response)\n\n    groups = [\n        Group.model_validate(dict(g, client=self.client))\n        for g in groups_reponse.groups\n    ]\n\n    return groups\n</code></pre>"},{"location":"reference/sync/users/#sfapi_client.users.User.projects","title":"<code>projects()</code>","text":"<p>The projects the user is associate with.</p> <p>Returns:</p> Type Description <code>List[Project]</code> <p>the projects</p> Source code in <code>sfapi_client/_sync/users.py</code> <pre><code>def projects(self) -&gt; List[Project]:\n    \"\"\"\n    The projects the user is associate with.\n\n    :return: the projects\n    \"\"\"\n    if self.name != (self.client._user()).name:\n        raise SfApiError(\"Can only fetch projects for authenticated user.\")\n\n    r = self.client.get(\"account/projects\")\n\n    project_values = r.json()\n\n    projects = [\n        Project.model_validate(dict(p, client=self.client))\n        for p in project_values\n    ]\n\n    return projects\n</code></pre>"},{"location":"reference/sync/users/#sfapi_client.users.User.roles","title":"<code>roles()</code>","text":"<p>The roles the user is associate with.</p> <p>Returns:</p> Type Description <code>List[Role]</code> <p>the roles</p> Source code in <code>sfapi_client/_sync/users.py</code> <pre><code>def roles(self) -&gt; List[Role]:\n    \"\"\"\n    The roles the user is associate with.\n\n    :return: the roles\n    \"\"\"\n    if self.name != (self.client._user()).name:\n        raise SfApiError(\"Can only fetch roles for authenticated user.\")\n\n    r = self.client.get(\"account/roles\")\n\n    json_response = r.json()\n\n    roles = [\n        Role.model_validate(dict(p, client=self.client)) for p in json_response\n    ]\n\n    return roles\n</code></pre>"}]}